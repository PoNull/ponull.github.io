<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Docker安装Discourse论坛/BBS系统</title>
      <link href="/2023/11/08/docker-an-zhuang-discourse-lun-tan-bbs-xi-tong/"/>
      <url>/2023/11/08/docker-an-zhuang-discourse-lun-tan-bbs-xi-tong/</url>
      
        <content type="html"><![CDATA[<p>要求要大于2G内存, 服务器内存不够的可以<a href="/2023/11/08/linux-swap-fen-qu-de-chuang-jian-yu-gua-zai/" title="Linux-swap分区的创建与挂载">开启swap分区</a></p><p>下载Discourse<br>创建一个目录，用于存放Discourse。比如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> /usr/local/discourse<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>获得管理员权限：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token parameter variable">-s</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>克隆discourse(命令后半段的路径和上方创建的保持一致)：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone <span class="token string">'https://github.com/discourse/discourse_docker.git'</span> /usr/local/discourse<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>耐心等待完成。</p><p>完成后，进入该目录：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /usr/local/discourse<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改配置<br>克隆示例配置文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> samples/standalone.yml containers/app.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打开文本编辑器，修改复制后的配置文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> containers/app.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置国内镜像</p><p>如果你身在大陆，则需要进行镜像加速。找到配置文件中的templates块，添加国内镜像templates/web.china.template.yml：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">templates</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token string">"templates/postgres.template.yml"</span><span class="token punctuation">-</span> <span class="token string">"templates/redis.template.yml"</span><span class="token punctuation">-</span> <span class="token string">"templates/sshd.template.yml"</span><span class="token punctuation">-</span> <span class="token string">"templates/web.template.yml"</span><span class="token punctuation">-</span> <span class="token string">"templates/web.china.template.yml"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置域名</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置邮箱发件服务(不配置重构时会一直报错,我就是看到报错提示有stmp字样才反应过来未配置邮箱服务器)</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>停止</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">./launcher stop app<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重构</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">./launcher bootstrap app<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>等待重构完成，执行容器启动命令。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">./launcher start app<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>进入discourse，会提示发邮件激活，如果收不到，可以用下面指令，创建一个管理员账号直接跳过，然后在左边设置里语言设置为中文即可，然后有个地方可以发邮件测试，会提示报错原因，多试几次就可以成功了。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">./launcher enter apprake admin<span class="token punctuation">:</span>create<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>参考:<br><a href="https://www.bugcatt.com/archives/2529">链接1</a><br><a href="https://meta.discourse.org/t/discourse/278426/2">链接2</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux-swap分区的创建与挂载</title>
      <link href="/2023/11/08/linux-swap-fen-qu-de-chuang-jian-yu-gua-zai/"/>
      <url>/2023/11/08/linux-swap-fen-qu-de-chuang-jian-yu-gua-zai/</url>
      
        <content type="html"><![CDATA[<p>创建1G的swap，可以根据你的服务器配置来调整大小 </p><h2 id="设置交换分区文件"><a href="#设置交换分区文件" class="headerlink" title="设置交换分区文件"></a>设置交换分区文件</h2><p>设置一块大小为2G的内存空间，虚拟内存的空间大小为物理内存的1~2倍较合适。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">dd</span> <span class="token assign-left variable">if</span><span class="token operator">=</span>/dev/zero <span class="token assign-left variable">of</span><span class="token operator">=</span>/mnt/swap <span class="token assign-left variable">bs</span><span class="token operator">=</span>1M <span class="token assign-left variable">count</span><span class="token operator">=</span><span class="token number">2048</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">1024</span>+0 records <span class="token keyword">in</span><span class="token number">1024</span>+0 records out<span class="token number">1073741824</span> bytes <span class="token punctuation">(</span><span class="token number">1.1</span> GB<span class="token punctuation">)</span> copied, <span class="token number">16.5011</span> s, <span class="token number">65.1</span> MB/s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="修改权限"><a href="#修改权限" class="headerlink" title="修改权限"></a>修改权限</h2><p>修改内存空间的权限,  推荐为600</p><pre class="line-numbers language-base" data-language="base"><code class="language-base">chmod 600 /mnt/swap<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="格式化swap分区"><a href="#格式化swap分区" class="headerlink" title="格式化swap分区"></a>格式化swap分区</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkswap</span> /mnt/swap<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Setting up swapspace version <span class="token number">1</span>, size <span class="token operator">=</span> <span class="token number">2</span> GiB <span class="token punctuation">(</span><span class="token number">2147479552</span> bytes<span class="token punctuation">)</span>no label, <span class="token assign-left variable">UUID</span><span class="token operator">=</span>7c609b14-3163-4672-9f46-fdfab8b64cb3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>也可以通过执行blkid命令来查看磁盘的UUID</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">blkid /mnt/swap<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="启动swap"><a href="#启动swap" class="headerlink" title="启动swap"></a>启动swap</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">swapon</span> /mnt/swap <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="设置开机自动挂载"><a href="#设置开机自动挂载" class="headerlink" title="设置开机自动挂载"></a>设置开机自动挂载</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># echo "/mnt/swap swap swap defaults 0 0" &gt;&gt; /etc/fstab 网上有直接用目录的, 我没测试过</span><span class="token builtin class-name">echo</span> <span class="token string">"7c609b14-3163-4672-9f46-fdfab8b64cb3 swap swap defaults 0 0"</span> <span class="token operator">&gt;&gt;</span> /etc/fstab<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="查看swap分区"><a href="#查看swap分区" class="headerlink" title="查看swap分区"></a>查看swap分区</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">free</span> <span class="token parameter variable">-m</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">              total        used        <span class="token function">free</span>      shared  buff/cache   availableMem:            <span class="token number">844</span>         <span class="token number">251</span>          <span class="token number">59</span>           <span class="token number">3</span>         <span class="token number">533</span>         <span class="token number">430</span>Swap:          <span class="token number">2047</span>           <span class="token number">0</span>        <span class="token number">2047</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="关闭swap分区"><a href="#关闭swap分区" class="headerlink" title="关闭swap分区"></a>关闭swap分区</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">swapoff /mnt/swap<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>还可以调整多个swap分区的优先级，我这里就不做演示了，网上可以搜到</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>搭建meek协议的梯子</title>
      <link href="/2023/11/07/da-jian-meek-xie-yi-de-ti-zi/"/>
      <url>/2023/11/07/da-jian-meek-xie-yi-de-ti-zi/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="2f7ee08df79fca36ecdb831f18b6dff1e4fa4f6431486eab7b0b3f582dbe0d5d"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> needPwd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vite构建React项目</title>
      <link href="/2023/11/02/vite-gou-jian-react-xiang-mu/"/>
      <url>/2023/11/02/vite-gou-jian-react-xiang-mu/</url>
      
        <content type="html"><![CDATA[<p>vite + react + tailwindcss + material-ui</p><p>vite <a href="https://cn.vitejs.dev/guide/">文档</a></p><p>安装Vite<br>Npm</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> create vite@latest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Yarn</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span> create vite<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Pnpm:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pnpx create vite<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>构建React项目</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># npm 6.x</span><span class="token function">npm</span> create vite@latest my-react-app <span class="token parameter variable">--template</span> react<span class="token comment"># npm 7+, extra double-dash is needed:</span><span class="token function">npm</span> create vite@latest my-react-app -- <span class="token parameter variable">--template</span> react<span class="token comment"># yarn</span><span class="token function">yarn</span> create vite my-react-app <span class="token parameter variable">--template</span> react<span class="token comment"># pnpm</span><span class="token function">pnpm</span> create vite my-react-app <span class="token parameter variable">--template</span> react<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>vite 其实还有更多模板，具体可以看<a href="https://cn.vitejs.dev/guide/#scaffolding-your-first-vite-project">这里</a><br><code>vanilla</code>，<code>vanilla-ts</code>, <code>vue</code>, <code>vue-ts</code>，<code>react</code>，<code>react-ts</code>，<code>react-swc</code>，<code>react-swc-ts</code>，<code>preact</code>，<code>preact-ts</code>，<code>lit</code>，<code>lit-ts</code>，<code>svelte</code>，<code>svelte-ts</code>，<code>solid</code>，<code>solid-ts</code>，<code>qwik</code>，<code>qwik-ts</code>。</p><p>安装依赖</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> my-react-app<span class="token function">npm</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>启动项目</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> run dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装tailwindcss</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-D</span> tailwindcss postcss autoprefixer<span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-D</span> tailwindcss@latest postcss@latest autoprefixer@latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>生成tailwindcss配置文件（加上-p参数就可以生成postcss的配置文件）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npx tailwindcss init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时会在项目目录生成tailwindcss.config.js</p><p>修改content内容</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"./index.html"</span><span class="token punctuation">,</span>    <span class="token string">"./src/**/*.{vue,js,ts,jsx,tsx}"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token literal-property property">theme</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">extend</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打开<code>index.css</code> 替换为</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@tailwind</span> base<span class="token punctuation">;</span></span><span class="token atrule"><span class="token rule">@tailwind</span> components<span class="token punctuation">;</span></span><span class="token atrule"><span class="token rule">@tailwind</span> utilities<span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>修改<code>vite.config.js</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vite'</span><span class="token keyword">import</span> react <span class="token keyword">from</span> <span class="token string">'@vitejs/plugin-react'</span><span class="token keyword">import</span> tailwindcss <span class="token keyword">from</span> <span class="token string">'tailwindcss'</span><span class="token keyword">import</span> autoprefixer <span class="token keyword">from</span> <span class="token string">'autoprefixer'</span><span class="token keyword">import</span> <span class="token punctuation">{</span>resolve<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'path'</span><span class="token comment">// https://vitejs.dev/config/</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">react</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token literal-property property">resolve</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">alias</span><span class="token operator">:</span><span class="token punctuation">{</span>      <span class="token string-property property">'@'</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'./src'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">css</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">postcss</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>        tailwindcss<span class="token punctuation">,</span>        autoprefixer      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>提示path不存在 安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i <span class="token parameter variable">-D</span> @types/node<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样就ok了</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>搭建节点订阅转换服务器</title>
      <link href="/2023/11/02/da-jian-jie-dian-ding-yue-zhuan-huan-fu-wu-qi/"/>
      <url>/2023/11/02/da-jian-jie-dian-ding-yue-zhuan-huan-fu-wu-qi/</url>
      
        <content type="html"><![CDATA[<p>有时候用别人的订阅服务, 在更新节点的时候总感觉拉不动, 于是就想着自己搭建一个, 顺便学习一下</p><h2 id="SubConverter后端搭建"><a href="#SubConverter后端搭建" class="headerlink" title="SubConverter后端搭建"></a>SubConverter后端搭建</h2><p>源码地址: <a href="https://github.com/tindy2013/subconverter">tindy2013/subconverter</a></p><h3 id="下载并解压项目release-二进制文件"><a href="#下载并解压项目release-二进制文件" class="headerlink" title="下载并解压项目release 二进制文件"></a>下载并解压<a href="https://github.com/tindy2013/subconverter/releases">项目release 二进制文件</a></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /root<span class="token function">wget</span> https://github.com/tindy2013/subconverter/releases/download/v0.8.1/subconverter_linux64.tar.gz<span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> subconverter_linux64.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="修改配置文件参数"><a href="#修改配置文件参数" class="headerlink" title="修改配置文件参数"></a>修改配置文件参数</h3><h5 id="找到解压出来的目录的subconverter-pref-ini文件"><a href="#找到解压出来的目录的subconverter-pref-ini文件" class="headerlink" title="找到解压出来的目录的subconverter/pref.ini文件"></a>找到解压出来的目录的<code>subconverter/pref.ini</code>文件</h5><p>这里会有三个文件<code>pref.example.ini</code> <code>pref.example.toml</code> <code>pref.example.yml</code><br>好像都是一样的, 这里我们使用<code>pref.example.yml</code>进行修改，我觉得yml语法简单清晰一些，其它的也同理</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /root/subconverter<span class="token function">cp</span> pref.example.yml pref.yml<span class="token function">vim</span> pref.yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="找到如下参数进行修改"><a href="#找到如下参数进行修改" class="headerlink" title="找到如下参数进行修改"></a>找到如下参数进行修改</h5><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">common</span><span class="token punctuation">:</span>  <span class="token key atrule">api_access_token</span><span class="token punctuation">:</span> subconvertertoken            <span class="token comment">#随意设置自己知道就行</span><span class="token key atrule">managed_config</span><span class="token punctuation">:</span>  <span class="token key atrule">managed_config_prefix</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//sub.domain.com  <span class="token comment">#设置成我们刚刚解析的域名</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">listen</span><span class="token punctuation">:</span> 127.0.0.1                              <span class="token comment">#这里改成 127.0.0.1 进行反代</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建服务进程并启动"><a href="#创建服务进程并启动" class="headerlink" title="创建服务进程并启动"></a>创建服务进程并启动</h3><p>接下来我们需要创建一个服务，让VPS每次重启或是开机自动运行后端程序</p><p>找到VPS目录 <code>/etc/systemd/system</code>，创建一个名为 sub.service 的文件</p><p>打开文件，贴入以下内容，保存。</p><pre class="line-numbers language-editorconfig" data-language="editorconfig"><code class="language-editorconfig"><span class="token section selector"><span class="token punctuation">[</span>Unit<span class="token punctuation">]</span></span><span class="token key attr-name">Description</span><span class="token value attr-value"><span class="token punctuation">=</span>A API For Subscription Convert</span><span class="token key attr-name">After</span><span class="token value attr-value"><span class="token punctuation">=</span>network.target</span><span class="token section selector"><span class="token punctuation">[</span>Service<span class="token punctuation">]</span></span><span class="token key attr-name">Type</span><span class="token value attr-value"><span class="token punctuation">=</span>simple</span><span class="token key attr-name">ExecStart</span><span class="token value attr-value"><span class="token punctuation">=</span>/root/subconverter/subconverter</span><span class="token key attr-name">WorkingDirectory</span><span class="token value attr-value"><span class="token punctuation">=</span>/root/subconverter</span><span class="token key attr-name">Restart</span><span class="token value attr-value"><span class="token punctuation">=</span>always</span><span class="token key attr-name">RestartSec</span><span class="token value attr-value"><span class="token punctuation">=</span>10</span><span class="token section selector"><span class="token punctuation">[</span>Install<span class="token punctuation">]</span></span><span class="token key attr-name">WantedBy</span><span class="token value attr-value"><span class="token punctuation">=</span>multi-user.target</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="检查运行状态以及设置开机自启"><a href="#检查运行状态以及设置开机自启" class="headerlink" title="检查运行状态以及设置开机自启"></a>检查运行状态以及设置开机自启</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl daemon-reloadsystemctl start subsystemctl <span class="token builtin class-name">enable</span> subsystemctl status sub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>到这里，后端就搭建完毕了，接下来我们需要配置反代</p><h2 id="反代配置"><a href="#反代配置" class="headerlink" title="反代配置"></a>反代配置</h2><h3 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt</span> <span class="token function">install</span> nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="配置反代"><a href="#配置反代" class="headerlink" title="配置反代"></a>配置反代</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/nginx/sites-available/default<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="找到server节点，修改如下"><a href="#找到server节点，修改如下" class="headerlink" title="找到server节点，修改如下"></a>找到server节点，修改如下</h5><pre class="line-numbers language-text" data-language="text"><code class="language-text">server {    listen 80 sub.domain.com;    listen [::]:80 sub.domain.com;    server_name _;    location / {        proxy_pass http://127.0.0.1:25500;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="前端搭建与配置"><a href="#前端搭建与配置" class="headerlink" title="前端搭建与配置"></a>前端搭建与配置</h2><h3 id="下载并安装-Sub-Web"><a href="#下载并安装-Sub-Web" class="headerlink" title="下载并安装 Sub-Web"></a>下载并安装 Sub-Web</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/CareyWang/sub-web.git<span class="token builtin class-name">cd</span> sub-web<span class="token function">npm</span> <span class="token function">install</span> <span class="token comment"># 或者 yarn install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="运行程序"><a href="#运行程序" class="headerlink" title="运行程序"></a>运行程序</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> run serve <span class="token comment"># 或者 yarn serve</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="修改版"><a href="#修改版" class="headerlink" title="修改版"></a>修改版</h3><p>原项目 不支持node18了, 可以用以下项目代替<br><a href="https://github.com/youshandefeiyang/sub-web-modify">https://suburl.v1.mk</a></p><h3 id="再次修改"><a href="#再次修改" class="headerlink" title="再次修改"></a>再次修改</h3><p>我已经用react重写了, 直接去仓库查找即可 订阅接口使用, 基本上都是使用的这个项目接口<a href="https://suburl.v1.mk/">https://suburl.v1.mk</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.mxlong.com/13.html">https://www.mxlong.com/13.html</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>css文字选中效果</title>
      <link href="/2023/10/24/css-wen-zi-xuan-zhong-xiao-guo/"/>
      <url>/2023/10/24/css-wen-zi-xuan-zhong-xiao-guo/</url>
      
        <content type="html"><![CDATA[<h3 id="文字选中效果"><a href="#文字选中效果" class="headerlink" title="文字选中效果"></a>文字选中效果</h3><p>这个可能很少有人注意过。在默认状态先一般选中的文本颜色是白字蓝底的，不过可以通过css进行设置。<br>代码如下：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/*文字选中效果*/</span><span class="token selector">*::selection</span> <span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> palevioletred<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">*::-moz-selection</span> <span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> palevioletred<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">*::-webkit-selection</span> <span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> palevioletred<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>::selection定义元素上的伪选择器，以便在选定元素时设置其中文本的样式。请注意，如果不组合任何其他选择器，则样式将在文档根级别应用于任何可选元素。</p>]]></content>
      
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何实现展开和收起动画</title>
      <link href="/2022/11/21/ru-he-shi-xian-zhan-kai-he-shou-qi-dong-hua/"/>
      <url>/2022/11/21/ru-he-shi-xian-zhan-kai-he-shou-qi-dong-hua/</url>
      
        <content type="html"><![CDATA[<p>项目开发中，内容过长或者一些扩展选择通常都是隐藏的，我们可以通过display: none来进行显示和隐藏，可是未免有些太突兀了，没有过渡的情况，用户是很难接受的</p><p>我们可以利用展开和收起动画来进行演示</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.filter</span> <span class="token punctuation">{</span>    <span class="token property">transition</span><span class="token punctuation">:</span> all .3s ease-in-out<span class="token punctuation">;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scaleY</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">transform-origin</span><span class="token punctuation">:</span> top<span class="token punctuation">;</span>    <span class="token property">max-height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.filter.open</span> <span class="token punctuation">{</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scaleY</span><span class="token punctuation">(</span>1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">max-height</span><span class="token punctuation">:</span> 1000rpx<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时只需要对元素添加open或者删除open就可以实现动画了，手风琴类似，只是把open改到了其他元素上面</p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>原生js增加或者删除class</title>
      <link href="/2022/11/21/yuan-sheng-js-zeng-jia-huo-zhe-shan-chu-class/"/>
      <url>/2022/11/21/yuan-sheng-js-zeng-jia-huo-zhe-shan-chu-class/</url>
      
        <content type="html"><![CDATA[<h2 id="比较传统的方法"><a href="#比较传统的方法" class="headerlink" title="比较传统的方法"></a>比较传统的方法</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> classVal <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"class"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除</span>classVal <span class="token operator">=</span> classVal<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"someClassName"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"class"</span><span class="token punctuation">,</span>classVal <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//添加</span>classVal <span class="token operator">=</span> classVal<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">" someClassName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"class"</span><span class="token punctuation">,</span>classVal <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//替换</span>classVal <span class="token operator">=</span> classVal<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"someClassName"</span><span class="token punctuation">,</span><span class="token string">"otherClassName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"class"</span><span class="token punctuation">,</span>classVal <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="html5增加了classList"><a href="#html5增加了classList" class="headerlink" title="html5增加了classList"></a>html5增加了classList</h2><p>classList 属性返回元素的类名，作为 DOMTokenList 对象。</p><p>该属性用于在元素中添加，移除及切换 CSS 类。</p><p>classList 属性是只读的，但你可以使用 add() 和 remove() 方法修改它。</p><p>classList属性的方法有</p><ul><li>add(value) 添加类名，如果有则不添加</li><li>contains(value) 判断是否存在类名，返回Boolean值</li><li>remove(value) 从列表中删除类名</li><li>toggle(value) 切换类名：如果列表中存在则删除，否则添加</li></ul><pre class="line-numbers language-none"><code class="language-none">增加：document.getElementById("myDIV").classList.add("mystyle","anotherClass","thirdClass");去除：document.getElementById("myDIV").classList.remove("mystyle");<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://juejin.cn/post/6844903814756040712">https://juejin.cn/post/6844903814756040712</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>实现界面闪烁提醒警告</title>
      <link href="/2022/11/21/shi-xian-jie-mian-shan-shuo-ti-xing-jing-gao/"/>
      <url>/2022/11/21/shi-xian-jie-mian-shan-shuo-ti-xing-jing-gao/</url>
      
        <content type="html"><![CDATA[<p>一般我们在做界面的时候，经常会写一些用户需要提交数据的界面，而用户总是会漏掉某些关键数据忘记填写，此时我们就需要对用户进行比较明确的错误提示，这里实现对某个区块的高亮闪烁提醒</p><h1 id="定义动画"><a href="#定义动画" class="headerlink" title="定义动画"></a>定义动画</h1><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@keyframes</span> unfilled</span> <span class="token punctuation">{</span>    <span class="token selector">0%</span> <span class="token punctuation">{</span>        <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.0<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">50%</span> <span class="token punctuation">{</span>        <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 1.0<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">100%</span> <span class="token punctuation">{</span>        <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.0<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="添加动画"><a href="#添加动画" class="headerlink" title="添加动画"></a>添加动画</h1><p>这里闪烁三次 每次一秒中</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.input</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token selector">.input.highlight</span> <span class="token punctuation">{</span>    <span class="token property">animation</span><span class="token punctuation">:</span> 1s unfilled 3<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>剩下的 就可以在js中设置定时器<br>3秒之后取消highlight这个class，以备下次使用(<a href="https://www.ponull.com/archives/278">操作dom class</a>)</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>    <span class="token keyword">function</span> <span class="token function">highlight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'highlight'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">'highlight'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加删除class可自行选择方式 jq，vue等各自都可以实现</p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu编译安装Nginx</title>
      <link href="/2022/11/15/bian-yi-an-zhuang-nginx/"/>
      <url>/2022/11/15/bian-yi-an-zhuang-nginx/</url>
      
        <content type="html"><![CDATA[<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a><strong>环境准备</strong></h2><p>先安装准备环境</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> libgd-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下载</p><p>nginx下载地址：<a href="http://nginx.org/en/download.html">http://nginx.org/en/download.html</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> http://nginx.org/download/nginx-1.22.1.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解压</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> <span class="token parameter variable">-xzvf</span> nginx-1.22.1.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="安装与启动"><a href="#安装与启动" class="headerlink" title="安装与启动"></a>安装与启动</h2><p>接下来进入解压好的目录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> nginx-1.22.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./configure<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可能会提示pcre，zlib依赖库需要安装。</p><p>解决办法：安装pcre库</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> update<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> libpcre3 libpcre3-dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后在执行：./configure命令</p><h3 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">make</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a><strong>启动</strong></h3><p>切到路径：/usr/local/nginx/sbin 执行命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>查看nginx进程</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> <span class="token parameter variable">-ef</span>  <span class="token function">grep</span> nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>配置软链接</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">ln</span> <span class="token parameter variable">-s</span> /usr/local/nginx/sbin/nginx /usr/bin/nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nginx <span class="token parameter variable">-s</span> reload  ：修改配置后重新加载生效nginx <span class="token parameter variable">-s</span> reopen  ：重新打开日志文件nginx <span class="token parameter variable">-t</span> <span class="token parameter variable">-c</span> /path/to/nginx.conf 测试nginx配置文件是否正确关闭nginx：nginx <span class="token parameter variable">-s</span> stop  :快速停止nginxnginx <span class="token parameter variable">-s</span> quit  ：完整有序的停止nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="加入systemctl管理服务"><a href="#加入systemctl管理服务" class="headerlink" title="加入systemctl管理服务"></a>加入systemctl管理服务</h2><h3 id="进入到-usr-lib-systemd-system目录下，编辑文件nginx-service"><a href="#进入到-usr-lib-systemd-system目录下，编辑文件nginx-service" class="headerlink" title="进入到**/usr/lib/systemd/system目录下，编辑文件nginx.service**"></a>进入到**/usr/lib/systemd/system<strong>目录下，编辑文件</strong>nginx.service**</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /usr/lib/systemd/system<span class="token function">sudo</span> <span class="token function">vi</span> nginx.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="在nginx-service文件中加入以下代码"><a href="#在nginx-service文件中加入以下代码" class="headerlink" title="在nginx.service文件中加入以下代码"></a>在nginx.service文件中加入以下代码</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">[Unit]Description=nginxAfter=network.target  [Service]Type=forkingExecStart=/usr/local/nginx/sbin/nginxExecReload=/usr/local/nginx/sbin/nginx -s reloadExecStop=/usr/local/nginx/sbin/nginx -s quitPrivateTmp=true  [Install]WantedBy=multi-user.target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数说明</p><p>注意：[Service]的启动、重启、停止命令全部要求使用绝对路径 <a href="https://www.cnblogs.com/gd-luojialin/p/15028214.html">更详细的说明</a>，<a href="https://blog.csdn.net/sunboychenll/article/details/108098949">再来一个</a></p><pre class="line-numbers language-text" data-language="text"><code class="language-text">[Unit]:服务的说明Description:描述服务After:描述服务类别[Service]服务运行参数的设置Type=forking是后台运行的形式ExecStart为服务的具体运行命令ExecReload为重启命令ExecStop为停止命令PrivateTmp=True表示给服务分配独立的临时空间[Install]运行级别下服务安装的相关设置，可设置为多用户，即系统运行级别为3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="设置开机启动"><a href="#设置开机启动" class="headerlink" title="设置开机启动"></a>设置开机启动</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> nginx.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="取消开机自启动"><a href="#取消开机自启动" class="headerlink" title="取消开机自启动"></a>取消开机自启动</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl disable nginx.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><p>启动nginx服务，（可能会提示启动不了，有个什么异常，我直接重启的，应该先关闭nginx就可以正常启动了，后面有时间再研究研究）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl start nginx.service　<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看服务当前状态</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl status nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">test@123:~<span class="token comment"># systemctl status nginx</span>● nginx.service - nginx     Loaded: loaded <span class="token punctuation">(</span>/lib/systemd/system/nginx.service<span class="token punctuation">;</span> enabled<span class="token punctuation">;</span> vendor preset: enabled<span class="token punctuation">)</span>     Active: active <span class="token punctuation">(</span>running<span class="token punctuation">)</span> since Tue <span class="token number">2022</span>-11-15 <span class="token number">17</span>:37:51 CST<span class="token punctuation">;</span> 7min ago    Process: <span class="token number">888</span> <span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/usr/local/nginx/sbin/nginx <span class="token punctuation">(</span>code<span class="token operator">=</span>exited, <span class="token assign-left variable">status</span><span class="token operator">=</span><span class="token number">0</span>/SUCCESS<span class="token punctuation">)</span>   Main PID: <span class="token number">889</span> <span class="token punctuation">(</span>nginx<span class="token punctuation">)</span>      Tasks: <span class="token number">2</span> <span class="token punctuation">(</span>limit: <span class="token number">1037</span><span class="token punctuation">)</span>     Memory: <span class="token number">1</span>.1M     CGroup: /system.slice/nginx.service             ├─889 nginx: master process /usr/local/nginx/sbin/nginx             └─890 nginx: worker processNov <span class="token number">15</span> <span class="token number">17</span>:37:51 iZt4nid3hab40nowjje166Z systemd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>: Starting nginx<span class="token punctuation">..</span>.Nov <span class="token number">15</span> <span class="token number">17</span>:37:51 iZt4nid3hab40nowjje166Z systemd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>: Started nginx.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>停止nginx服务</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl stop nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重新启动服务</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl restart nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看所有已启动的服务</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl list-units <span class="token parameter variable">--type</span><span class="token operator">=</span>service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">test@123:~<span class="token comment"># systemctl list-units --type=service</span>  UNIT                                 LOAD   ACTIVE SUB     DESCRIPTION                                                accounts-daemon.service              loaded active running Accounts Service                                           aegis.service                        loaded active running LSB: aegis update.                                         apparmor.service                     loaded active exited  Load AppArmor profiles                                     atd.service                          loaded active running Deferred execution scheduler                               chrony.service                       loaded active running chrony, an NTP client/server                               cloud-config.service                 loaded active exited  Apply the settings specified <span class="token keyword">in</span> cloud-config               cloud-final.service                  loaded active exited  Execute cloud user/final scripts                           cloud-init-local.service             loaded active exited  Initial cloud-init job <span class="token punctuation">(</span>pre-networking<span class="token punctuation">)</span>                    cloud-init.service                   loaded active exited  Initial cloud-init job <span class="token punctuation">(</span>metadata <span class="token function">service</span> crawler<span class="token punctuation">)</span>          console-setup.service                loaded active exited  Set console font and keymap                                cron.service                         loaded active running Regular background program processing daemon               dbus.service                         loaded active running D-Bus System Message Bus                                   getty@tty1.service                   loaded active running Getty on tty1                                              grub-common.service                  loaded active exited  LSB: Record successful boot <span class="token keyword">for</span> GRUB                       keyboard-setup.service               loaded active exited  Set the console keyboard layout                            kmod-static-nodes.service            loaded active exited  Create list of static device nodes <span class="token keyword">for</span> the current kernel  networkd-dispatcher.service          loaded active running Dispatcher daemon <span class="token keyword">for</span> systemd-networkd                     nginx.service                        loaded active running nginx                                                      resolvconf.service                   loaded active exited  Nameserver information manager                             rsyslog.service                      loaded active running System Logging Service                                     serial-getty@ttyS0.service           loaded active running Serial Getty on ttyS0                                      setvtrgb.service                     loaded active exited  Set console scheme                                         ssh.service                          loaded active running OpenBSD Secure Shell server                                sysstat.service                      loaded active exited  Resets System Activity Data Collector                      systemd-journal-flush.service        loaded active exited  Flush Journal to Persistent Storage                        systemd-journald.service             loaded active running Journal Service                                            systemd-logind.service               loaded active running Login Service                                              systemd-modules-load.service         loaded active exited  Load Kernel Modules                                        systemd-networkd-wait-online.service loaded active exited  Wait <span class="token keyword">for</span> Network to be Configured                          systemd-networkd.service             loaded active running Network Service                                            systemd-random-seed.service          loaded active exited  Load/Save Random Seed                                      systemd-remount-fs.service           loaded active exited  Remount Root and Kernel File Systems                       systemd-resolved.service             loaded active running Network Name Resolution                                    systemd-sysctl.service               loaded active exited  Apply Kernel Variables                                     systemd-sysusers.service             loaded active exited  Create System Users                                        systemd-tmpfiles-setup-dev.service   loaded active exited  Create Static Device Nodes <span class="token keyword">in</span> /dev                         systemd-tmpfiles-setup.service       loaded active exited  Create Volatile Files and Directories                      systemd-udev-trigger.service         loaded active exited  udev Coldplug all Devices                                  systemd-udevd.service                loaded active running udev Kernel Device Manager                                 systemd-update-utmp.service          loaded active exited  Update UTMP about System Boot/Shutdown                     systemd-user-sessions.service        loaded active exited  Permit User Sessions                                       ufw.service                          loaded active exited  Uncomplicated firewall                                     user-runtime-dir@0.service           loaded active exited  User Runtime Directory /run/user/0                         user@0.service                       loaded active running User Manager <span class="token keyword">for</span> <span class="token environment constant">UID</span> <span class="token number">0</span>                                   LOAD   <span class="token operator">=</span> Reflects whether the unit definition was properly loaded.ACTIVE <span class="token operator">=</span> The high-level unit activation state, i.e. generalization of SUB.SUB    <span class="token operator">=</span> The low-level unit activation state, values depend on unit type.<span class="token number">44</span> loaded <span class="token function">units</span> listed. Pass <span class="token parameter variable">--all</span> to see loaded but inactive units, too.To show all installed unit files use <span class="token string">'systemctl list-unit-files'</span><span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考连接"><a href="#参考连接" class="headerlink" title="参考连接"></a>参考连接</h2><ol><li><a href="https://blog.csdn.net/qq233325332/article/details/121975064">https://blog.csdn.net/qq233325332/article/details/121975064</a></li><li><a href="https://www.cnblogs.com/djlsunshine/p/11255709.html">https://www.cnblogs.com/djlsunshine/p/11255709.html</a></li><li><a href="https://zhuanlan.zhihu.com/p/77813702">https://zhuanlan.zhihu.com/p/77813702</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 环境搭建 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>谷歌翻译免费api</title>
      <link href="/2022/11/10/gu-ge-fan-yi-mian-fei-api/"/>
      <url>/2022/11/10/gu-ge-fan-yi-mian-fei-api/</url>
      
        <content type="html"><![CDATA[<p>最近做的一个项目，需要将中文翻译的到英文，想白嫖，经过网上搜寻一波，发现google有免费api的提供</p><p>请求地址<a href="https://translate.googleapis.com/translate/_a/single">https://translate.googleapis.com/translate\_a/single</a></p><p>sl - 源语言代码（auto为自动检测）。<br>tl - 翻译语言<br>q - 源文本/词<br>ie - 输入编码(猜测)<br>oe - 输出编码(猜测)<br>dt - 可以包含多次，指定回复中的内容<br>dj - 带有名称的JSON回复，而不是只有数组(dj=1)</p><p>这里有一些dt的值。</p><p>t - 源文本的翻译<br>at - 替代的翻译<br>rm - 源文本和翻译文本的转录/音译<br>bd - 词典，如果源文本是一个词的话（你可以得到带文章的翻译，反向翻译，等等）。<br>md - 源文本的定义，如果它是一个词的话<br>ss - 源文本的同义词，如果它是一个词的话<br>ex - 例子<br>rw - 参见列表</p><p>贴出php执行代码，其他语言一样，简单的http请求而已</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$http_client</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified">GuzzleHttp<span class="token punctuation">\</span>Client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$res</span> <span class="token operator">=</span> <span class="token variable">$http_client</span><span class="token operator">-&gt;</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'GET'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'https://translate.googleapis.com/translate_a/single'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>    <span class="token string single-quoted-string">'verify'</span> <span class="token operator">=&gt;</span> <span class="token constant boolean">false</span><span class="token punctuation">,</span>    <span class="token string single-quoted-string">'headers'</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>        <span class="token string single-quoted-string">'User-Agent'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'</span><span class="token punctuation">,</span>        <span class="token string single-quoted-string">'Accept-Encoding'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'gzip'</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string single-quoted-string">'query'</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>            <span class="token string single-quoted-string">'client'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'gtx'</span><span class="token punctuation">,</span>        <span class="token string single-quoted-string">'sl'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'auto'</span><span class="token punctuation">,</span>        <span class="token string single-quoted-string">'tl'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'zh-CH'</span><span class="token punctuation">,</span>        <span class="token string single-quoted-string">'dt'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'t'</span><span class="token punctuation">,</span>        <span class="token string single-quoted-string">'dj'</span> <span class="token operator">=&gt;</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token string single-quoted-string">'q'</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">"Interface\ndisplay\noptimization"</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考链接: <a href="https://wiki.freepascal.org/Using_Google_Translate">https://wiki.freepascal.org/Using_Google_Translate</a></p>]]></content>
      
      
      <categories>
          
          <category> 闲来杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> translate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dart中的数字类型</title>
      <link href="/2022/10/29/dart-zhong-de-shu-zi-lei-xing/"/>
      <url>/2022/10/29/dart-zhong-de-shu-zi-lei-xing/</url>
      
        <content type="html"><![CDATA[<p>这里，主要记录一下int的类型的存储，今天做一个解密方法移植，js =&gt; dart，按理说不应该出错，可以执行到位运算的时候，结果始终不对。先上代码 至于变量名为什么是a,b,c,d,e就不用纠结了，webpack编译出来的js就这样，我也不知道咋对应，干脆就一样的写</p><h2 id="JS版"><a href="#JS版" class="headerlink" title="JS版"></a>JS版</h2><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sign</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token number">32</span> <span class="token operator">-</span> b<span class="token punctuation">;</span>    <span class="token keyword">let</span> d <span class="token operator">=</span> a <span class="token operator">&lt;&lt;</span> b<span class="token punctuation">;</span>    <span class="token keyword">let</span> e <span class="token operator">=</span> a <span class="token operator">&gt;&gt;&gt;</span> c<span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"start------"</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> d  e<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p><a href="https://www.ponull.com/wp-content/uploads/2022/10/image-13.png"><img src="https://www.ponull.com/wp-content/uploads/2022/10/image-13.png"></a></p><h2 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h2><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart">int <span class="token function">sign</span><span class="token punctuation">(</span>int a<span class="token punctuation">,</span> int b<span class="token punctuation">)</span> <span class="token punctuation">{</span>  int c <span class="token operator">=</span> <span class="token number">32</span> <span class="token operator">-</span> b<span class="token punctuation">;</span>  int d <span class="token operator">=</span> a <span class="token operator">&lt;&lt;</span> b<span class="token punctuation">;</span>  int e <span class="token operator">=</span> a <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> c<span class="token punctuation">;</span>  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"starat-------------"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> d  e<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h3><p><a href="https://www.ponull.com/wp-content/uploads/2022/10/image-14.png"><img src="https://www.ponull.com/wp-content/uploads/2022/10/image-14.png"></a></p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>js存储的类型，为了性能，内存上只占用了32位，而dart占了64位，所以在位运算时会和web端执行结果不一样，至于解决办法，寻找中，找到了来更新。</p><p><a href="https://dart.dev/guides/language/numbers#bitwise-operations">https://dart.dev/guides/language/numbers#bitwise-operations</a></p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>对于位操作，考虑明确地在32位块上操作，这在所有平台上是一致的。要强制对一个32位的块进行有符号解释，可以使用<code>int.toSigned(32)</code>。</p><p>对于其他精度重要的情况，可以考虑其他数字类型。BigInt类型在本地和网络上都提供了任意精度的整数。fixnum包提供了严格的64位有符号数字，即使在网络上也是如此。不过要小心使用这些类型：它们往往会导致代码明显变大和变慢。</p><p><a href="https://dart.dev/guides/language/numbers#what-should-you-do">https://dart.dev/guides/language/numbers#what-should-you-do</a></p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> dart </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GetX Cli</title>
      <link href="/2022/10/28/getx-cli/"/>
      <url>/2022/10/28/getx-cli/</url>
      
        <content type="html"><![CDATA[<p>虽然也用flutter写过几个项目，不过我是真的讨厌flutter路由管理，一直context下去，难受死了，于是就在网上找路由管理工具，找到了<a href="https://1467602180.github.io/flutter-getx-doc/">GetX</a>这个神奇的库，今天我们先来试用一下<a href="https://github.com/jonataslaw/get_cli/blob/master/README-zh_CN.md">GetX™ 框架的官方 CLI</a>。</p><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>按照官方步骤来，首先设置环境变量，添加项如下(设置过的可以不用管):</p><p>[FlutterSDK安装目录]\bin\cache\dart-sdk\bin<br>[FlutterSDK安装目录]\.pub-cache\bin</p><p>靠了，环境变量又不生效了，重启重启。。。<br>顺便下去做了个核酸，这几年的疫情是真的人都要整神。。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">flutter pub global activate get_cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里要注意 前面有flutter，不知道是我傻还是官方的文档不清楚，官方文档第一句没有带flutter，主要也是自己不熟悉吧，哈哈哈，重启了一万次，一直提示我pub命令不存在</p><p><a href="https://www.ponull.com/wp-content/uploads/2022/10/image-9.png"><img src="https://www.ponull.com/wp-content/uploads/2022/10/image-9-1024x175.png"></a></p><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>创建一个项目目录，进入项目目录，执行</p><pre class="line-numbers language-none"><code class="language-none">get create project //此时默认将目录名称作为项目名// 注: 默认使用文件夹名称作为项目名称// 你可以使用 `get create project:my_project` 给项目命名// 如果项目名称有空格则使用 `get create project:"my cool project"`<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>我这里如果不给项目取名，创建的时候就卡在让输入项目名那里了，输入了回车没反应。</p><p><a href="https://www.ponull.com/wp-content/uploads/2022/10/image-10.png"><img src="https://www.ponull.com/wp-content/uploads/2022/10/image-10-1024x408.png"></a></p><p>这样提示就是创建成功了，让我们用android studio打开看一下</p><p><a href="https://www.ponull.com/wp-content/uploads/2022/10/image-11.png"><img src="https://www.ponull.com/wp-content/uploads/2022/10/image-11.png"></a></p><p>创建目录之后，他会自动执行get init</p><h2 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h2><p>居然不是熟悉的目录，我记得下面有android和ios的配置文件的呀，算了算了，还是用flutter sdk创建吧</p><p>在现有项目中，生成所选结构，进入项目目录，执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">get init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="https://www.ponull.com/wp-content/uploads/2022/10/image-12.png"><img src="https://www.ponull.com/wp-content/uploads/2022/10/image-12-1024x523.png"></a></p><p>这下成功了，跑起来看一下效果，没有问题，那么getx初始化就完成了</p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flutter </tag>
            
            <tag> getx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter开发环境搭建</title>
      <link href="/2022/10/28/flutter-kai-fa-huan-jing-da-jian/"/>
      <url>/2022/10/28/flutter-kai-fa-huan-jing-da-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="首先我们打开官网-flutter"><a href="#首先我们打开官网-flutter" class="headerlink" title="首先我们打开官网 flutter"></a>首先我们打开官网 <a href="https://flutter.dev/">flutter</a></h2><p>大家没有科学上网的条件，可自行搜索国内的下载地址，我是软路由，直接起飞的，所以不管写什么语言，都直接默认镜像。</p><p>点击get start 来到官网安装说明页面，此时会让我们选择系统，我这里是windows，我就直接进去</p><p><a href="https://www.ponull.com/wp-content/uploads/2022/10/image-2.png"><img src="https://www.ponull.com/wp-content/uploads/2022/10/image-2-1024x532.png"></a></p><h2 id="下载flutter-sdk"><a href="#下载flutter-sdk" class="headerlink" title="下载flutter sdk"></a>下载flutter sdk</h2><p>下载完成之后解压放到非特权目录下面，目录也不要带有中文，空格等特殊字符，这里吐槽一下，别的sdk都是直接安装，这个居然让我解压，难受呀</p><h2 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h2><p>打开windows环境变量页面，在用户变量path下面添加刚刚解压的位置，注意是bin目录</p><p><a href="https://www.ponull.com/wp-content/uploads/2022/10/image-3.png"><img src="https://www.ponull.com/wp-content/uploads/2022/10/image-3.png"></a></p><p>环境变量</p><p>添加完成之后，我们来到命令行运行flutter doctor，看到这个命令就知道是检查，那我们运行，可看到结果提示未找到android sdk(没图是因为我执行完了，窗口都关了，才想起来记录博客，对不起大家呀)</p><pre class="line-numbers language-none"><code class="language-none">[-] Android toolchain - develop for Android devices    • Android SDK at D:\Android\sdk    ✗ Android SDK is missing command line tools; download from https://goo.gl/XxQghQ    • Try re-installing or updating your Android SDK,      visit https://docs.flutter.dev/setup/#android-setup for detailed instructions.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="安装Android-Studio"><a href="#安装Android-Studio" class="headerlink" title="安装Android Studio"></a>安装Android Studio</h2><p>遇上上面问题不用担心，我们直接安装<a href="https://developer.android.com/studio">Android Studio</a>就好了，下载一步一步的安装。这里需要注意运行，安装进入 ‘Android Studio Setup Wizard’，这会安装最新的 Android SDK， Android SDK Platform-Tools 以及 Android SDK Build-Tools，这些都是在开发 Android Flutter 应用时所需要的。一定要勾选上。</p><p>我们继续让医生检查检查 **<code>flutter doctor</code>**，不出意外，就会提示</p><p><a href="https://www.ponull.com/wp-content/uploads/2022/10/image-8.png"><img src="https://www.ponull.com/wp-content/uploads/2022/10/image-8-1024x386.png"></a></p><pre class="line-numbers language-none"><code class="language-none">Doctor summary (to see all details, run flutter doctor -v):[√] Flutter (Channel stable, 3.3.6, on Microsoft Windows [版本 10.0.22621.674], locale zh-CN)[!] Android toolchain - develop for Android devices (Android SDK version 33.0.0)X cmdline-tools component is missingRun path/to/sdkmanager --install "cmdline-tools;latest"See https://developer.android.com/studio/command-line for more details.X Android license status unknown.Run flutter doctor --android-licenses to accept the SDK licenses......<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至于这里为什么有图，还要贴执行结果，相信大部分人遇到问题都是这样直接复制出来搜索的吧，哈哈哈哈，机智如我有没有</p><h2 id="继续折腾Android-Studio"><a href="#继续折腾Android-Studio" class="headerlink" title="继续折腾Android Studio"></a>继续折腾Android Studio</h2><p>不要着急，还没安装完了，这里是提示 Command-line Tools未安装，我们打开android studio 如果没有打开过项目，那就点击More Action来到SDK 设置界面</p><p><a href="https://www.ponull.com/wp-content/uploads/2022/10/image-4.png"><img src="https://www.ponull.com/wp-content/uploads/2022/10/image-4-1024x768.png"></a></p><p>android studio</p><p>默认是SDK platforms选项，切换到SDK Tools这个时候你就可以看到这玩意儿</p><p><a href="https://www.ponull.com/wp-content/uploads/2022/10/image-5.png"><img src="https://www.ponull.com/wp-content/uploads/2022/10/image-5-1024x739.png"></a></p><p>没错，勾上它，直接apply安装即可，让我们再让医生检查检查</p><p>此时cmdline-tools错误提示已经没有了，</p><p><a href="https://www.ponull.com/wp-content/uploads/2022/10/image-6.png"><img src="https://www.ponull.com/wp-content/uploads/2022/10/image-6-1024x276.png"></a></p><p>根据命令提示，我们继续执行</p><pre class="line-numbers language-none"><code class="language-none">flutter doctor --android-licenses<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里会让你同意一系列的东西，无脑Y就可以了，最后你应该可以看到 <strong>All SDK package licenses accepted</strong> 说明已经安装完毕了，再次有请医生出场 <strong>flutter doctor</strong></p><p><a href="https://www.ponull.com/wp-content/uploads/2022/10/image-7.png"><img src="https://www.ponull.com/wp-content/uploads/2022/10/image-7-1024x255.png"></a></p><p>一片绿，看到没有，终于看到绿色没有那么气愤了，哈哈哈，到这里安装可以说是完成了。</p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flutter </tag>
            
            <tag> 环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux提示no space left on device</title>
      <link href="/2022/10/17/linux-ti-shi-no-space-left-on-device/"/>
      <url>/2022/10/17/linux-ti-shi-no-space-left-on-device/</url>
      
        <content type="html"><![CDATA[<p>提示NO SPACE LEFT ON DEVICE但有磁盘空间</p><p>按照提示以为是磁盘空间满了，于是执行 df -h查看：</p><p><a href="https://www.ponull.com/wp-content/uploads/2022/10/image-1.png"><img src="https://www.ponull.com/wp-content/uploads/2022/10/image-1.png"></a></p><p>这个明明显示还有磁盘空间的，这是为啥？</p><p>后来多次尝试重启mongo但依旧得到no space left on device同样的错误提示。</p><p>本机执行df -i，果然出现了链接里一样的情况</p><p><a href="https://www.ponull.com/wp-content/uploads/2022/10/image.png"><img src="https://www.ponull.com/wp-content/uploads/2022/10/image.png"></a></p><p>于是网上查inode的相关资料，大致结论如下：</p><p>Linux下一个文件夹或者一个文件就会占用一个inode资源<br>inode资源数量是在格式化磁盘的时候就指定的（可以不指定，但也会有一个值），要更改这个数量必须格式化磁盘<br>如果某个磁盘的inode资源用尽，即便磁盘有空间，也不能进行任何文件或者文件夹的新增<br>删除一个文件夹或者文件就能释放一个inode资源<br>上图显示我们/dev/vdb1这块磁盘有200G，但只有20w个inode<br>我们比对了下其他主机的inode资源数，发现容量少于200g的磁盘inode资源个数也远远大于20w。<br>所以几乎可以推断这块磁盘当初inode资源的个数是人为指定的，但不知道当初那个同事为啥这么设置[哭笑]</p><p>解决办法<br>删除不用的文件和文件夹释放inode<br>迁移数据到新磁盘然后格式化重新指定inode<br>当时临时采用了第一个方案，但没多久又出现同样的问题了。</p><p>后来重新买了一块磁盘，停掉相关服务，把数据拷贝到新的磁盘上，然后重新配置相关的服务配置文件（比如数据存放路径什么的），</p><p>但发现路径相关的配置比较多,比如fastdfs的配置。所有想到通过软连接的方式在不修改服务现有配置文件的情况下解决了数据迁移路径不一致的问题。</p><p>参考1 <a href="https://help.aliyun.com/document_detail/42531.html">https://help.aliyun.com/document_detail/42531.html</a></p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>修改浏览器Navigator对象的属性</title>
      <link href="/2022/07/21/xiu-gai-liu-lan-qi-navigator-dui-xiang-de-shu-xing/"/>
      <url>/2022/07/21/xiu-gai-liu-lan-qi-navigator-dui-xiang-de-shu-xing/</url>
      
        <content type="html"><![CDATA[<p>最近做项目，需要绕过检测是否为手机用户，通过调试发现网页调用Navigator.platform进行了判定</p><p>注入预执行js，直接修改值不生效，搜索发现，可通过Object.defineProperty进行设置</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>navigator<span class="token punctuation">,</span> <span class="token string">'platform'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">'linux arch64'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>tar命令使用详解</title>
      <link href="/2022/07/12/tar-ming-ling-shi-yong-xiang-jie/"/>
      <url>/2022/07/12/tar-ming-ling-shi-yong-xiang-jie/</url>
      
        <content type="html"><![CDATA[<h3 id="命令格式：tar-zxvf-【压缩包文件名-tar-gz】-C-【路径】"><a href="#命令格式：tar-zxvf-【压缩包文件名-tar-gz】-C-【路径】" class="headerlink" title="命令格式：tar -zxvf 【压缩包文件名.tar.gz】 -C 【路径】/"></a>命令格式：tar -zxvf 【压缩包文件名.tar.gz】 -C 【路径】/</h3><p>注释：解压.tar.gz格式到指定的目录下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> japan.tar.gz <span class="token parameter variable">-C</span> /tmp/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="命令格式：tar-jxvf-【压缩包文件名-tar-bz2】-C-【路径】"><a href="#命令格式：tar-jxvf-【压缩包文件名-tar-bz2】-C-【路径】" class="headerlink" title="命令格式：tar -jxvf 【压缩包文件名.tar.bz2】 -C 【路径】/"></a>命令格式：tar -jxvf 【压缩包文件名.tar.bz2】 -C 【路径】/</h3><p>注释：解压.tar.bz2格式到指定的目录下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> japan.tar.bz2 <span class="token parameter variable">-C</span> /tmp/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="压缩-tar-gz格式到指定目录下"><a href="#压缩-tar-gz格式到指定目录下" class="headerlink" title="压缩.tar.gz格式到指定目录下"></a><strong>压缩.tar.gz格式到指定目录下</strong></h3><p>命令格式：<strong>tar -zcvf 【目录】/ 【压缩包文件名.tar.gz】【源文件】</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> <span class="token parameter variable">-zcvf</span> /tmp/test.tar.gz japan/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：一次压缩多个文件直接在源文件后用空格格开即可</p><h3 id="压缩-tar-bz2格式到指定目录下"><a href="#压缩-tar-bz2格式到指定目录下" class="headerlink" title="压缩.tar.bz2格式到指定目录下"></a><strong>压缩.tar.bz2格式到指定目录下</strong></h3><p>命令格式：<strong>tar -jcvf 【目录】/ 【压缩包文件名.tar.gz】【源文件】</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> <span class="token parameter variable">-jcvf</span> /tmp/test.tar.bz2 japan/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：一次压缩多个文件直接在源文件后用空格格开即可</p><p><a href="https://www.ponull.com/wp-content/uploads/2022/07/image.png"><img src="https://www.ponull.com/wp-content/uploads/2022/07/image.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> 实用工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>安装Glances(centos)</title>
      <link href="/2022/07/01/an-zhuang-glancescentos/"/>
      <url>/2022/07/01/an-zhuang-glancescentos/</url>
      
        <content type="html"><![CDATA[<p>glances是一个监控工具，好像是python写的</p><h2 id="概览功能"><a href="#概览功能" class="headerlink" title="概览功能"></a>概览功能</h2><ul><li>CPU 信息（与用户相关的应用程序、系统核心程序和空闲程序。</li><li>总内存信息，包括 RAM、Swap、空闲内存等。</li><li>过去 1 分钟、5 分钟和 15 分钟的平均 CPU 负载。</li><li>网络连接的网络下载/上传速率。</li><li>进程总数、活动进程数、休眠进程数等。</li><li>磁盘 I/O 相关（读取或写入）速度详细信息</li><li>当前安装的设备磁盘使用情况。</li><li>顶级进程及其 CPU/内存使用情况、名称和应用程序位置。</li><li>在底部显示当前日期和时间。</li><li>以红色突出显示消耗最高系统资源的进程。</li></ul><p>epel是社区强烈打造的免费开源发行软件包版本库。</p><p>EPEL，即Extra Packages for Enterprise Linux的简称，是为企业级Linux提供的一组高质量的额外软件包，包括但不限于Red Hat Enterprise Linux (RHEL), CentOS and Scientific Linux (SL), Oracle Enterprise Linux (OEL)。(关于 : EPEL)</p><p>方法一：yum命令安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> epel-release <span class="token parameter variable">-y</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>方法二：手动安装</p><p>针对系统架构选择相应的类型：<a href="http://dl.fedoraproject.org/pub/epel/7/">http://dl.fedoraproject.org/pub/epel/7/</a>。我们使用的x86_64，就要进入该目录下寻找相应包，安装方法如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># rpm -ivh http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果报冲突,可以把冲突的包删除</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum remove epel-release<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># wget http://dl.fedoraproject.org/pub/epel/7/x86_64/e/epel-release-7-2.noarch.rpm</span><span class="token comment"># rpm -vih epel-release-7-2.noarch.rpm</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>更新数据</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum clean all <span class="token operator">&amp;&amp;</span> yum makecache<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看仓库多了下面一行，有一万多个包。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@hddcluster2 ~<span class="token punctuation">]</span><span class="token comment"># yum repolist</span>Loaded plugins: fastestmirror, langpacksLoading mirror speeds from cached hostfile * base: mirrors.cn99.com * epel: mirror01.idc.hinet.net * extras: mirrors.aliyun.com * updates: mirrors.cn99.comrepo <span class="token function">id</span>               repo name                                           statusbase/7/x86_64         CentOS-7 - Base                                      <span class="token number">9,363</span>*epel/x86_64          Extra Packages <span class="token keyword">for</span> Enterprise Linux <span class="token number">7</span> - x86_64      <span class="token number">11,018</span>extras/7/x86_64       CentOS-7 - Extras                                      <span class="token number">435</span>updates/7/x86_64      CentOS-7 - Updates                                     <span class="token number">418</span>repolist: <span class="token number">21,234</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）安装glances工具</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> glances <span class="token parameter variable">-y</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>3、使用glances</strong><br>直接执行galances命令</p>]]></content>
      
      
      <categories>
          
          <category> 实用工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Golang环境搭建(windows)</title>
      <link href="/2022/06/26/golang-huan-jing-da-jian-windows/"/>
      <url>/2022/06/26/golang-huan-jing-da-jian-windows/</url>
      
        <content type="html"><![CDATA[<p>golang这个语言写起来还是很方便的，并且我最喜欢的一点就是可以打包成二进制，在不同的环境下直接运行，不需要各种复杂的环境，而且编译速度也极快，（之前写过一段时间rust，那个编译速度简直不堪入目）</p><h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><p>官网直接下载<a href="https://go.dev/">https://go.dev/</a></p><p>至于安装，只需要下一步下一步就可以了，对于环境和一些SDK的安装，我习惯安装到默认位置</p><p>安装完成之后，我们输入<code>go env</code>即可看到go当前的一些环境变量的配置，这里我们主要是修改一下go path的位置，我习惯所有代码文件都在一个workspace文件夹下面，进行不同语言的区分（其实这种分发有问题，有些项目涉及多种语言就尬了）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">set</span> <span class="token assign-left variable">GO111MODULE</span><span class="token operator">=</span><span class="token builtin class-name">set</span> <span class="token assign-left variable">GOARCH</span><span class="token operator">=</span>amd64<span class="token builtin class-name">set</span> <span class="token assign-left variable">GOBIN</span><span class="token operator">=</span><span class="token builtin class-name">set</span> <span class="token assign-left variable">GOCACHE</span><span class="token operator">=</span>C:<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>Ponull<span class="token punctuation">\</span>AppData<span class="token punctuation">\</span>Local<span class="token punctuation">\</span>go-build<span class="token builtin class-name">set</span> <span class="token assign-left variable">GOENV</span><span class="token operator">=</span>C:<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>Ponull<span class="token punctuation">\</span>AppData<span class="token punctuation">\</span>Roaming<span class="token punctuation">\</span>go<span class="token punctuation">\</span>env<span class="token builtin class-name">set</span> <span class="token assign-left variable">GOEXE</span><span class="token operator">=</span>.exe<span class="token builtin class-name">set</span> <span class="token assign-left variable">GOEXPERIMENT</span><span class="token operator">=</span><span class="token builtin class-name">set</span> <span class="token assign-left variable">GOFLAGS</span><span class="token operator">=</span><span class="token builtin class-name">set</span> <span class="token assign-left variable">GOHOSTARCH</span><span class="token operator">=</span>amd64<span class="token builtin class-name">set</span> <span class="token assign-left variable">GOHOSTOS</span><span class="token operator">=</span>windows<span class="token builtin class-name">set</span> <span class="token assign-left variable">GOINSECURE</span><span class="token operator">=</span><span class="token builtin class-name">set</span> <span class="token assign-left variable">GOMODCACHE</span><span class="token operator">=</span>C:<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>Ponull<span class="token punctuation">\</span>go<span class="token punctuation">\</span>pkg<span class="token punctuation">\</span>mod<span class="token builtin class-name">set</span> <span class="token assign-left variable">GONOPROXY</span><span class="token operator">=</span><span class="token builtin class-name">set</span> <span class="token assign-left variable">GONOSUMDB</span><span class="token operator">=</span><span class="token builtin class-name">set</span> <span class="token assign-left variable">GOOS</span><span class="token operator">=</span>windows<span class="token builtin class-name">set</span> <span class="token assign-left variable">GOPATH</span><span class="token operator">=</span>C:<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>Ponull<span class="token punctuation">\</span>go<span class="token builtin class-name">set</span> <span class="token assign-left variable">GOPRIVATE</span><span class="token operator">=</span><span class="token builtin class-name">set</span> <span class="token assign-left variable">GOPROXY</span><span class="token operator">=</span>https://proxy.golang.org,direct<span class="token builtin class-name">set</span> <span class="token assign-left variable">GOROOT</span><span class="token operator">=</span>C:<span class="token punctuation">\</span>Program Files<span class="token punctuation">\</span>Go<span class="token builtin class-name">set</span> <span class="token assign-left variable">GOSUMDB</span><span class="token operator">=</span>sum.golang.org<span class="token builtin class-name">set</span> <span class="token assign-left variable">GOTMPDIR</span><span class="token operator">=</span><span class="token builtin class-name">set</span> <span class="token assign-left variable">GOTOOLDIR</span><span class="token operator">=</span>C:<span class="token punctuation">\</span>Program Files<span class="token punctuation">\</span>Go<span class="token punctuation">\</span>pkg<span class="token punctuation">\</span>tool<span class="token punctuation">\</span>windows_amd64<span class="token builtin class-name">set</span> <span class="token assign-left variable">GOVCS</span><span class="token operator">=</span><span class="token builtin class-name">set</span> <span class="token assign-left variable">GOVERSION</span><span class="token operator">=</span>go1.18.3<span class="token builtin class-name">set</span> <span class="token assign-left variable">GCCGO</span><span class="token operator">=</span>gccgo<span class="token builtin class-name">set</span> <span class="token assign-left variable">GOAMD64</span><span class="token operator">=</span>v1<span class="token builtin class-name">set</span> <span class="token assign-left variable">AR</span><span class="token operator">=</span>ar<span class="token builtin class-name">set</span> <span class="token assign-left variable">CC</span><span class="token operator">=</span>gcc<span class="token builtin class-name">set</span> <span class="token assign-left variable">CXX</span><span class="token operator">=</span>g++<span class="token builtin class-name">set</span> <span class="token assign-left variable">CGO_ENABLED</span><span class="token operator">=</span><span class="token number">1</span><span class="token builtin class-name">set</span> <span class="token assign-left variable">GOMOD</span><span class="token operator">=</span>NUL<span class="token builtin class-name">set</span> <span class="token assign-left variable">GOWORK</span><span class="token operator">=</span><span class="token builtin class-name">set</span> <span class="token assign-left variable">CGO_CFLAGS</span><span class="token operator">=</span>-g <span class="token parameter variable">-O2</span><span class="token builtin class-name">set</span> <span class="token assign-left variable">CGO_CPPFLAGS</span><span class="token operator">=</span><span class="token builtin class-name">set</span> <span class="token assign-left variable">CGO_CXXFLAGS</span><span class="token operator">=</span>-g <span class="token parameter variable">-O2</span><span class="token builtin class-name">set</span> <span class="token assign-left variable">CGO_FFLAGS</span><span class="token operator">=</span>-g <span class="token parameter variable">-O2</span><span class="token builtin class-name">set</span> <span class="token assign-left variable">CGO_LDFLAGS</span><span class="token operator">=</span>-g <span class="token parameter variable">-O2</span><span class="token builtin class-name">set</span> <span class="token assign-left variable">PKG_CONFIG</span><span class="token operator">=</span>pkg-config<span class="token builtin class-name">set</span> <span class="token assign-left variable">GOGCCFLAGS</span><span class="token operator">=</span>-m64 <span class="token parameter variable">-mthreads</span> -fno-caret-diagnostics -Qunused-arguments -fmessage-length<span class="token operator">=</span><span class="token number">0</span> -fdebug-prefix-map<span class="token operator">=</span>C:<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>Shaum<span class="token punctuation">\</span>AppData<span class="token punctuation">\</span>Local<span class="token punctuation">\</span>Temp<span class="token punctuation">\</span>go-build3545789971<span class="token operator">=</span>/tmp/go-build -gno-record-gcc-switches<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置GOPATH</p><p>环境变量设置GOPATH就可以了，好像没啥说的，只是GOPATH下面配置好pkg,bin,src三个目录就好了</p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>React axios跨域访问一个或多个域</title>
      <link href="/2022/05/30/react-axios-kua-yu-fang-wen-yi-ge-huo-duo-ge-yu/"/>
      <url>/2022/05/30/react-axios-kua-yu-fang-wen-yi-ge-huo-duo-ge-yu/</url>
      
        <content type="html"><![CDATA[<p>开发的时候，总是会出现跨域的问题，react不像vue有个配置文件所以会比vue麻烦一些，这里我们借助http-proxy-middleware这个来实现</p><p>注意：这个我测试不行，不知道是那里的问题，启动报错</p><p><a href="https://www.ponull.com/wp-content/uploads/2022/05/20220530211922.png"><img src="https://www.ponull.com/wp-content/uploads/2022/05/20220530211922.png"></a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> http-proxy-middleware <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>首先暂时运行命令将配置暴露出来</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> run <span class="token function">eject</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行完成可能会出现一个报错</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">√ Are you sure you want to eject? This action is permanent. ... yesThis git repository has untracked files or uncommitted changes:app_client/package-lock.jsonM app_client/package.jsonM app_client/src/screen/taskList/TaskList.tsxapp_client/src/setupProxy.tsM gonitor.dbRemove untracked files, stash or commit any changes, and try again.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>报错的原因呢是因为咱们在使用脚手架搭建 react 时，系统会自动给我们添加一个 .gitignore 文件，如果你没有提交到仓库过，你就需要先提交到仓库，直接<code>git add .</code> <code>git commit -m "message"</code>上去就好了</p><p>完成这两步之后就可以继续 命名<code>npm run eject</code> ，等配置文件暴露完成之后，你的 <code>package.json</code> 可能非常多配置，咱们不用管，在 src 下面建一个setupProxy.js (好像没有ts版本，暂时没有找到先用js版本吧，本人对ts理解也不深，就不去深究了)在里面写上下面代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">{</span> createProxyMiddleware <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http-proxy-middleware'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">app</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>        <span class="token function">createProxyMiddleware</span><span class="token punctuation">(</span><span class="token string">'/api'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>            <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">'http://127.0.0.1:8899'</span><span class="token punctuation">,</span>            <span class="token literal-property property">changeOrigin</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>    app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>        <span class="token string">'/sys'</span><span class="token punctuation">,</span>        <span class="token function">createProxyMiddleware</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">'http://127.0.0.1:8899'</span><span class="token punctuation">,</span>            <span class="token literal-property property">changeOrigin</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>找到 scripts 路径 打开 strat.js</p><p><a href="https://www.ponull.com/wp-content/uploads/2022/05/1653915910.png"><img src="https://www.ponull.com/wp-content/uploads/2022/05/1653915910.png"></a></p><p>在第 117行左右 加上下面代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../src/setupProxy'</span><span class="token punctuation">)</span><span class="token punctuation">(</span>devServer<span class="token punctuation">)</span> <span class="token comment">//注意路径是否正，是你刚才建的那个文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="https://www.ponull.com/wp-content/uploads/2022/05/20220530210646.png"><img src="https://www.ponull.com/wp-content/uploads/2022/05/20220530210646-1024x655.png"></a></p><p>如此 多个跨域便成功了，值得注意的就是， 需要在你请求的具体路径前面加上 api 或 sys 就可以被反向代理出去了</p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PHP Cli模式下获取参数</title>
      <link href="/2022/05/27/php-cli-mo-shi-xia-huo-qu-can-shu/"/>
      <url>/2022/05/27/php-cli-mo-shi-xia-huo-qu-can-shu/</url>
      
        <content type="html"><![CDATA[<p>作为一个PHPer，却一直嫌弃PHP，其实是自己不够了解PHP，除了异步，你们能做的PHP也能做到</p><h2 id="数组-argv"><a href="#数组-argv" class="headerlink" title="数组$argv"></a>数组$argv</h2><p>例如我们执行一个php文件，需要参数（daemon=&gt;true, domain=&gt;”127.0.0.1”,port=&gt;8080）</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$argv</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行<code>php test.php true 127.0.0.1 8080</code></p><p>得到（注意在终端输入的都是字符串）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Array<span class="token punctuation">(</span>    <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">&gt;</span> test.php    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token boolean">true</span>    <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">127.0</span>.0.1    <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">8080</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数分析(可以看到argv[0]为当前执行的php文件名称，而argv[1]~argv[3]则是传递的参数的值)</p><p>可以看到argv[0]为当前执行的php文件名称，而argv[1]~argv[3]则是传递的参数的值</p><ul><li>argv[0]为当前执行的php文件名称</li><li>argv[1]等于daemon的值</li><li>argv[2]等于domain的值</li><li>argv[3]等于port的值</li></ul><p>缺点：</p><p>使用argv数组，可以按顺序获取传递的参数。但获取后，需要做一个对应处理，上例中需要把argv[1]对应daemon参数,argv[2]对应domain参数,argv[3]对应port参数。而如果在传递的过程中，参数顺序写错，则会导致程序出错。</p><p>eg:</p><p>执行 <code>php test.php 127.0.0.1 true 8080</code></p><p>输出</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Array<span class="token punctuation">(</span>    <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">&gt;</span> test.php    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">127.0</span>.0.1    <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token boolean">true</span>    <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">8080</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以发现参数顺序变了，如果我们读取方式为</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$daemon</span> <span class="token operator">=</span> <span class="token variable">$argv</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$domain</span> <span class="token operator">=</span> <span class="token variable">$argv</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$port</span> <span class="token operator">=</span> <span class="token variable">$argv</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>那么读取出来就会出错。所以不推荐这种方式</p><h2 id="系统方法getopt"><a href="#系统方法getopt" class="headerlink" title="系统方法getopt"></a>系统方法getopt</h2><p>getopt 从命令行参数列表中获取选项</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function-definition function">getopt</span><span class="token punctuation">(</span>  <span class="token keyword type-hint">string</span> <span class="token variable">$short_options</span><span class="token punctuation">,</span>  <span class="token keyword type-hint">array</span> <span class="token variable">$long_options</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span><span class="token variable">$rest_index</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">arrayfalse</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用short-options"><a href="#使用short-options" class="headerlink" title="使用short_options"></a>使用short_options</h3><p>a,b,c 为需要值<br>d 为可选值<br>e 为不接受值</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$param</span> <span class="token operator">=</span> <span class="token function">getopt</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'a:b:c:d::e'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$param</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>执行<code>php test.php -a 1 -b 2 -c 3 -d=4 -e 5</code></p><p>输出</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Array<span class="token punctuation">(</span>    <span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">1</span>    <span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">2</span>    <span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">3</span>    <span class="token punctuation">[</span>d<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">4</span>    <span class="token punctuation">[</span>e<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以发现abc正常接收 可选值d也接受了，但是e传入的值直接被忽略了</p><h3 id="使用long-options"><a href="#使用long-options" class="headerlink" title="使用long_options"></a>使用long_options</h3><p>type,is_hot 为需要值<br>limit 为可选值<br>expire 为不接受值</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$longopt</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>    <span class="token string single-quoted-string">'type:'</span><span class="token punctuation">,</span>    <span class="token string single-quoted-string">'is_hot:'</span><span class="token punctuation">,</span>    <span class="token string single-quoted-string">'limit::'</span><span class="token punctuation">,</span>    <span class="token string single-quoted-string">'expire'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$param</span> <span class="token operator">=</span> <span class="token function">getopt</span><span class="token punctuation">(</span><span class="token string single-quoted-string">''</span><span class="token punctuation">,</span> <span class="token variable">$longopt</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$param</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行<code>php test.php --type news --is_hot 1 --limit=10 --expire=100</code></p><p>输出</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Array<span class="token punctuation">(</span>    <span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">&gt;</span> news    <span class="token punctuation">[</span>is_hot<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">1</span>    <span class="token punctuation">[</span>limit<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">10</span>    <span class="token punctuation">[</span>expire<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="找到第一非选项，后面忽略实例"><a href="#找到第一非选项，后面忽略实例" class="headerlink" title="找到第一非选项，后面忽略实例"></a>找到第一非选项，后面忽略实例</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$longopt</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>    <span class="token string single-quoted-string">'type:'</span><span class="token punctuation">,</span>    <span class="token string single-quoted-string">'is_hot:'</span><span class="token punctuation">,</span>    <span class="token string single-quoted-string">'limit::'</span><span class="token punctuation">,</span>    <span class="token string single-quoted-string">'expire'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$param</span> <span class="token operator">=</span> <span class="token function">getopt</span><span class="token punctuation">(</span><span class="token string single-quoted-string">''</span><span class="token punctuation">,</span> <span class="token variable">$longopt</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$param</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行<code>php test.php --type news --is_hots 1 --limit=10 --expire=100</code></p><p>输出</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Array<span class="token punctuation">(</span>    <span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">&gt;</span> news<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>因为is_hots不是选项值（定义的是is_hot），所以从这里开始之后的参数，都被丢弃。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><p>使用argv数组传参数，方法简单，实现方便。参数的顺序不能错，参数获取后需要做对应处理。<br>使用getopt方法，可使用参数名，参数顺序可随意，比较规范。（建议使用）</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/fdipzone/article/details/51945892">https://blog.csdn.net/fdipzone/article/details/51945892</a></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>浅谈Keep-Alive</title>
      <link href="/2022/05/23/qian-tan-keep-alive/"/>
      <url>/2022/05/23/qian-tan-keep-alive/</url>
      
        <content type="html"><![CDATA[<p>之前开发的时候，经常看见这个header头，一直没有了解为什么可以保持连接，以及保持连接作用，在本书2.7发现答案</p><p>HTTP 协议的初始版本中，每进行一次 HTTP 通信就要断开一次TCP 连接。</p><h2 id="持久连接"><a href="#持久连接" class="headerlink" title="持久连接"></a>持久连接</h2><p><a href="https://www.ponull.com/wp-content/uploads/2022/05/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20220523172831.png"><img src="https://www.ponull.com/wp-content/uploads/2022/05/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20220523172831.png"></a></p><p>以当年的通信情况来说，因为都是些容量很小的文本传输，所以即 使这样也没有多大问题。可随着 HTTP 的普及，文档中包含大量图片的 情况多了起来。</p><p>比如，使用浏览器浏览一个包含多张图片的 HTML 页面时，在发 送请求访问 HTML 页面资源的同时，也会请求该 HTML 页面里包含的 其他资源。因此，每次的请求都会造成无谓的 TCP 连接建立和断开， 增加通信量的开销。</p><p><a href="https://www.ponull.com/wp-content/uploads/2022/05/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20220523173016.png"><img src="https://www.ponull.com/wp-content/uploads/2022/05/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20220523173016.png"></a></p><p>累</p><p>为解决上述 TCP 连接的问题，HTTP/1.1 和一部分的 HTTP/1.0 想出 了持久连接（HTTP Persistent Connections，也称为 HTTP keep-alive 或 HTTP connection reuse）的方法。持久连接的特点是，只要任意一端没 有明确提出断开连接，则保持 TCP 连接状态。</p><p><a href="https://www.ponull.com/wp-content/uploads/2022/05/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20220523173242.png"><img src="https://www.ponull.com/wp-content/uploads/2022/05/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20220523173242.png"></a></p><p>持久连接旨在建立 1 次 TCP 连接后进行多次请求和响应的交互</p><p>持久连接的好处在于减少了 TCP 连接的重复建立和断开所造成的 额外开销，减轻了服务器端的负载。另外，减少开销的那部分时间，使 HTTP 请求和响应能够更早地结束，这样 Web 页面的显示速度也就相应 提高了。</p><p>在 HTTP/1.1 中，所有的连接默认都是持久连接，但在 HTTP/1.0 内 并未标准化。虽然有一部分服务器通过非标准的手段实现了持久连接，但服务器端不一定能够支持持久连接。毫无疑问，除了服务器端，客户端也需要支持持久连接。</p><h2 id="管线化"><a href="#管线化" class="headerlink" title="管线化"></a>管线化</h2><p>持久连接使得多数请求以管线化（pipelining）方式发送成为可能。从前发送请求后需等待并收到响应，才能发送下一个请求。</p><p>管线化技术出现后，不用等待响应亦可直接发送下一个请求。这样就能够做到同时并行发送多个请求，而不需要一个接一个地等待响应了。</p><p><a href="https://www.ponull.com/wp-content/uploads/2022/05/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20220523173610.png"><img src="https://www.ponull.com/wp-content/uploads/2022/05/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20220523173610.png"></a></p><p>比如，当请求一个包含 10 张图片的 HTML Web 页面，与挨个连接 相比，用持久连接可以让请求更快结束。而管线化技术则比持久连接还 要快。请求数越多，时间差就越明显。</p>]]></content>
      
      
      <categories>
          
          <category> 图解 HTTP </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>URI格式</title>
      <link href="/2022/05/23/uri-ge-shi/"/>
      <url>/2022/05/23/uri-ge-shi/</url>
      
        <content type="html"><![CDATA[<p>与 URI（统一资源标识符）相比，我们更熟悉 URL（ Uniform Resource Locator，统一资源定位符）。 URL 正是使用 Web 浏览器等访问 Web 页面时需要输入的网页地址。</p><h2 id="统一资源标识符"><a href="#统一资源标识符" class="headerlink" title="统一资源标识符"></a>统一资源标识符</h2><p>URI 是 Uniform Resource Identifier 的缩写。 RFC2396 分别对这 3 个单词进行了如下定义。</p><h3 id="Uniform"><a href="#Uniform" class="headerlink" title="Uniform"></a>Uniform</h3><p>规定统一的格式可方便处理多种不同类型的资源，而不用根据上下 文环境来识别资源指定的访问方式。 另外，加入新增的协议方案 （如 http: 或 ftp:）也更容易。</p><h3 id="Resource"><a href="#Resource" class="headerlink" title="Resource"></a>Resource</h3><p>资源的定义是“可标识的任何东西”。除了文档文件、图像或服务 （例如当天的天气预报）等能够区别于其他类型的， 全都可作为资 源。另外，资源不仅可以是单一的，也可以是多数的集合体。</p><h3 id="Identifier"><a href="#Identifier" class="headerlink" title="Identifier"></a>Identifier</h3><p>表示可标识的对象。也称为标识符。</p><p>综上所述， URI 就是由某个协议方案表示的资源的定位标识符。协议方案是指访问资源所使用的协议类型名称。 采 用 HTTP 协 议 时， 协 议 方 案 就 是 http。 除 此 之 外， 还 有 ftp、 mailto、 telnet、 file 等。标准的 URI 协议方案有 30 种左右，由隶属于国 际互联网资源管理的非营利社团 ICANN（ Internet Corporation for Assigned Names and Numbers，互联网名称与数字地址分配机构）的 IANA （ Internet Assigned Numbers Authority，互联网号码分配局）管理颁布。</p><p><strong>IANA - Uniform Resource Identifier (URI) SCHEMES（统一资源标识符方案</strong>）</p><p><a href="http://www.iana.org/assignments/uri-schemes">http://www.iana.org/assignments/uri-schemes</a></p><p>URI 用字符串标识某一互联网资源， 而 URL 表示资源的地点（互 联网上所处的位置）。可见 URL 是 URI 的子集。</p><p>“RFC3986：统一资源标识符（ URI）通用语法”中列举了几种 URI 例子，如下所示。</p><p><a href="https://www.ponull.com/wp-content/uploads/2022/05/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20220523171401.png"><img src="https://www.ponull.com/wp-content/uploads/2022/05/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20220523171401.png"></a></p><p>uri eg</p><h2 id="URI-格式"><a href="#URI-格式" class="headerlink" title="URI 格式"></a>URI 格式</h2><p>表示指定的 URI，要使用涵盖全部必要信息的绝对 URI、绝对 URL以及相对 URL。相对 URL，是指从浏览器中基本 URI 处指定的 URL，形如 /image/logo.gif。<br>让我们先来了解一下绝对 URI 的格式。  </p><p><a href="https://www.ponull.com/wp-content/uploads/2022/05/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20220523170117.png"><img src="https://www.ponull.com/wp-content/uploads/2022/05/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20220523170117.png"></a></p><p>uri</p><p>使用 http: 或 https: 等协议方案名获取访问资源时要指定协议类型。不区分字母大小写，最后附一个冒号（ :）。也可使用 data: 或 javascript: 这类指定数据或脚本程序的方案名。  </p><h3 id="登录信息（认证）"><a href="#登录信息（认证）" class="headerlink" title="登录信息（认证）"></a>登录信息（认证）</h3><p>指定用户名和密码作为从服务器端获取资源时必要的登录信息（身份认证）。此项是可选项。</p><h3 id="服务器地址"><a href="#服务器地址" class="headerlink" title="服务器地址"></a>服务器地址</h3><p>使用绝对 URI 必须指定待访问的服务器地址。地址可以是类似hackr.jp 这种 DNS 可解析的名称，或是 192.168.1.1 这类 IPv4 地址名，还可以是 [0:0:0:0:0:0:0:1] 这样用方括号括起来的 IPv6 地址名。</p><h3 id="服务器端口号"><a href="#服务器端口号" class="headerlink" title="服务器端口号"></a>服务器端口号</h3><p>指定服务器连接的网络端口号。此项也是可选项，若用户省略则自动使用默认端口号。</p><h3 id="带层次的文件路径"><a href="#带层次的文件路径" class="headerlink" title="带层次的文件路径"></a>带层次的文件路径</h3><p>指定服务器上的文件路径来定位特指的资源。这与 UNIX 系统的文 件目录结构相似。</p><h3 id="查询字符串"><a href="#查询字符串" class="headerlink" title="查询字符串"></a>查询字符串</h3><p>针对已指定的文件路径内的资源，可以使用查询字符串传入任意参数。此项可选。</p><h3 id="片段标识符"><a href="#片段标识符" class="headerlink" title="片段标识符"></a>片段标识符</h3><p>使用片段标识符通常可标记出已获取资源中的子资源（文档内的 某个位置）。但在 RFC 中并没有明确规定其使用方法。该项也为 可选项。</p><h2 id="并不是所有的应用程序都符合-RFC"><a href="#并不是所有的应用程序都符合-RFC" class="headerlink" title="并不是所有的应用程序都符合 RFC"></a>并不是所有的应用程序都符合 RFC</h2><p>有 一 些 用 来 制 定 HTTP 协 议 技 术 标 准 的 文 档， 它 们 被 称 为 RFC （Request for Comments，征求修正意见书）。</p><p>通常，应用程序会遵照由 RFC 确定的标准实现。可以说，RFC 是互 联网的设计文档，要是不按照 RFC 标准执行，就有可能导致无法通信的 状况。比如，有一台 Web 服务器内的应用服务没有遵照 RFC 的标准实现， 那 Web 浏览器就很可能无法访问这台服务器了。</p><p>由于不遵照 RFC 标准实现就无法进行 HTTP 协议通信，所以基本上 客户端和服务器端都会以 RFC 为标准来实现 HTTP 协议。但也存在某些 应用程序因客户端或服务器端的不同，而未遵照 RFC 标准，反而将自成 一套的“标准”扩展的情况。</p><p>不按 RFC 标准来实现，当然也不必劳心费力让自己的“标准”符合 其他所有的客户端和服务器端。但设想一下，如果这款应用程序的使用者 非常多，那会发生什么情况？不难想象，其他的客户端或服务器端必然都 不得不去配合它。</p><p>实际在互联网上，已经实现了 HTTP 协议的一些服务器端和客户端 里就存在上述情况。</p>]]></content>
      
      
      <categories>
          
          <category> 图解 HTTP </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PHP HTTP客户端-Guzzle原理解析</title>
      <link href="/2022/05/23/php-http-ke-hu-duan-guzzle-yuan-li-jie-xi/"/>
      <url>/2022/05/23/php-http-ke-hu-duan-guzzle-yuan-li-jie-xi/</url>
      
        <content type="html"><![CDATA[<p>本文适合寻找PHP HTTP客户端库，或者对于Guzzle的使用和实现原理比较感兴趣的同学阅读，需要具备一定的PHP基础知识。</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在PHP后台开发过程中，经常会遇到模块间需要通过HTTP通信的情形。PHP语言本身只提供了<a href="https://so.csdn.net/so/search?q=socket&amp;spm=1001.2101.3001.7020">socket</a>操作的接口，并未提供HTTP相关操作的接口。许多现有的实现采用curl扩展充当HTTP Client与HTTP Server通信，但仍需自己封装curl的接口。有鉴于此，本文介绍一款流行的PHP HTTP Client客户端—Guzzle（<a href="https://github.com/guzzle/guzzle/%EF%BC%89%E7%9A%84%E7%94%A8%E6%B3%95%EF%BC%8C%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90%E5%85%B6%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E3%80%82">https://github.com/guzzle/guzzle/）的用法，深入分析其底层实现原理。</a></p><h2 id="Guzzle用法"><a href="#Guzzle用法" class="headerlink" title="Guzzle用法"></a>Guzzle用法</h2><p>例如使用Guzzle访问<a href="http://www.baidu.com的代码：">http://www.baidu.com的代码：</a></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$client</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>GuzzleHttp<span class="token punctuation">\</span>Client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$response</span> <span class="token operator">=</span> <span class="token variable">$client</span><span class="token operator">-&gt;</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'GET'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'http://www.baidu.com'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>    <span class="token string double-quoted-string">"timeout"</span> <span class="token operator">=&gt;</span> <span class="token number">3000</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token variable">$response</span><span class="token operator">-&gt;</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$response</span><span class="token operator">-&gt;</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接口封装是不是十分简单？只需要关心请求方法，目标url和请求的选项即可快速上手。同时，Guzzle还支持异步请求方式：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">use</span> <span class="token package">GuzzleHttp<span class="token punctuation">\</span>Exception<span class="token punctuation">\</span>RequestException</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Psr<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Message<span class="token punctuation">\</span>ResponseInterface</span><span class="token punctuation">;</span> <span class="token variable">$client</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>GuzzleHttp<span class="token punctuation">\</span>Client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$promise</span> <span class="token operator">=</span> <span class="token variable">$client</span><span class="token operator">-&gt;</span><span class="token function">requestAsync</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'GET'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'http://www.baidu.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$promise</span><span class="token operator">-&gt;</span><span class="token function">then</span><span class="token punctuation">(</span>    <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">ResponseInterface</span> <span class="token variable">$res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token variable">$res</span><span class="token operator">-&gt;</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token variable">$res</span><span class="token operator">-&gt;</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$res</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">RequestException</span> <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token variable">$e</span><span class="token operator">-&gt;</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token variable">$e</span><span class="token operator">-&gt;</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>基于异步请求，Guzzle还实现了并发请求，关于Guzzle的具体使用方法可以参考其中文文档<a href="http://guzzle-cn.readthedocs.io/zh/_CN/latest/index.html%E3%80%82">http://guzzle-cn.readthedocs.io/zh\_CN/latest/index.html。</a></p><h2 id="Guzzle实现原理"><a href="#Guzzle实现原理" class="headerlink" title="Guzzle实现原理"></a>Guzzle实现原理</h2><h3 id="client构造"><a href="#client构造" class="headerlink" title="client构造"></a>client构造</h3><p>GuzzleHttp\Client类构造函数声明为：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token keyword type-hint">array</span> <span class="token variable">$config</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>$config配置使得用户可以根据需要配置一切可以配置的选项，包括allow_redirects、auth、connect_timeout、proxy等。除此之外，还可以自定义请求的处理函数handler，方便应用程序扩展，handler接口规范为：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function-definition function">handler</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">,</span> <span class="token keyword type-hint">array</span> <span class="token variable">$options</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>处理成功时，接口返回Psr\Http\Message\ResponseInterface；失败时返回GuzzleHttp\Exception\RequestException异常。</p><p>默认情形下，GuzzleHttp\HandlerStack::create会创建请求处理函数</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">create</span><span class="token punctuation">(</span><span class="token keyword type-hint">callable</span> <span class="token variable">$handler</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$stack</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">self</span><span class="token punctuation">(</span><span class="token variable">$handler</span> <span class="token operator">?</span><span class="token punctuation">:</span> <span class="token function">choose_handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$stack</span><span class="token operator">-&gt;</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name static-context">Middleware</span><span class="token operator">::</span><span class="token function">httpErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'http_errors'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$stack</span><span class="token operator">-&gt;</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name static-context">Middleware</span><span class="token operator">::</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'allow_redirects'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$stack</span><span class="token operator">-&gt;</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name static-context">Middleware</span><span class="token operator">::</span><span class="token function">cookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'cookies'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$stack</span><span class="token operator">-&gt;</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name static-context">Middleware</span><span class="token operator">::</span><span class="token function">prepareBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'prepare_body'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token variable">$stack</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>create函数以堆栈的形式创建了一系列的处理函数，包括http异常、重定向、cookie和prepare_body。处理函数返回的函数闭包为：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token keyword type-hint">callable</span> <span class="token variable">$handler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">,</span> <span class="token keyword type-hint">array</span> <span class="token variable">$options</span><span class="token punctuation">)</span> <span class="token keyword">use</span> <span class="token punctuation">(</span><span class="token variable">$handler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token operator">...</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>函数入参为handler，返回一个新的handler，这样可以将所有的处理函数链接在一起，最终生成一个符合handler接口规范的函数.</p><p>choose_handler函数选择stack中的起始handler，选择策略为：</p><ul><li>扩展自带curl_multi_exec和curl_exec函数则根据$options中的synchronous选项决定，empty(synchronous)为false则使用CurlHandler，否则使用CurlMultiHandler</li><li>扩展只有curl_exec函数则使用CurlHandler</li><li>扩展只有curl_multi_exec函数则使用CurlMultiHandler</li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/** * Chooses and creates a default handler to use based on the environment. * * The returned handler is not wrapped by any default middlewares. * * @return callable Returns the best handler for the given system. * @throws \RuntimeException if no viable Handler is available. */</span><span class="token keyword">function</span> <span class="token function-definition function">choose_handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$handler</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">function_exists</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'curl_multi_exec'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">function_exists</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'curl_exec'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$handler</span> <span class="token operator">=</span> <span class="token class-name static-context">Proxy</span><span class="token operator">::</span><span class="token function">wrapSync</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CurlMultiHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">CurlHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token function">function_exists</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'curl_exec'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$handler</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CurlHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token function">function_exists</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'curl_multi_exec'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$handler</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CurlMultiHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ini_get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'allow_url_fopen'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$handler</span> <span class="token operator">=</span> <span class="token variable">$handler</span>            <span class="token operator">?</span> <span class="token class-name static-context">Proxy</span><span class="token operator">::</span><span class="token function">wrapStreaming</span><span class="token punctuation">(</span><span class="token variable">$handler</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">StreamHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">StreamHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$handler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>RuntimeException</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'GuzzleHttp requires cURL, the '</span>            <span class="token operator">.</span> <span class="token string single-quoted-string">'allow_url_fopen ini setting, or a custom HTTP handler.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token variable">$handler</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后，如果php.ini中开启了allow_url_fopen，则根据$options中的stream选项决定，empty(stream)为false则使用StreamHandler。</p><h3 id="client调用request方法"><a href="#client调用request方法" class="headerlink" title="client调用request方法"></a>client调用request方法</h3><p>request方法实现为：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">request</span><span class="token punctuation">(</span><span class="token variable">$method</span><span class="token punctuation">,</span> <span class="token variable">$uri</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">,</span> <span class="token keyword type-hint">array</span> <span class="token variable">$options</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$options</span><span class="token punctuation">[</span><span class="token class-name static-context">RequestOptions</span><span class="token operator">::</span><span class="token constant">SYNCHRONOUS</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">requestAsync</span><span class="token punctuation">(</span><span class="token variable">$method</span><span class="token punctuation">,</span> <span class="token variable">$uri</span><span class="token punctuation">,</span> <span class="token variable">$options</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由此可见，<strong>request事实上是采用了requestAsync异步方法+wait来完成的，也就是异步转同步。</strong></p><h4 id="requestAsync"><a href="#requestAsync" class="headerlink" title="requestAsync"></a>requestAsync</h4><p>requestAsync将请求信息包装成Psr7\Request对象，然后调用</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">transfer</span><span class="token punctuation">(</span><span class="token class-name type-declaration">RequestInterface</span> <span class="token variable">$request</span><span class="token punctuation">,</span> <span class="token keyword type-hint">array</span> <span class="token variable">$options</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>transfer函数最终返回Promise\promise_for($handler($request, $options)); 其中$handler即为构造函数中所设置的stack，stack中存放一系列的请求处理函数。 HandlerStack的处理函数为:</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__invoke</span><span class="token punctuation">(</span><span class="token class-name type-declaration">RequestInterface</span> <span class="token variable">$request</span><span class="token punctuation">,</span> <span class="token keyword type-hint">array</span> <span class="token variable">$options</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$handler</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token variable">$handler</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">,</span> <span class="token variable">$options</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意: 这里也能说明自己的PHP基础已经忘得差不多了，最开始阅读源码的时候<strong>__invoke</strong>这个方法，只能想起来是一个魔术方法，没有想到是干什么用的，在这里迷惑了好久。就在想为什么这个类能被当作方法使用。</p><p>resolve方法解析整个stack，返回一个包装后的handler，包装策略为按照出栈顺序包装，也就是</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token function">array_reverse</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">stack</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token variable">$fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$prev</span> <span class="token operator">=</span> <span class="token variable">$fn</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token variable">$prev</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>典型的中间件模型，所有的处理函数串接在一起了。请求经由http_errors、allow_redirects等处理之后到达Curl，执行真正的网络交互。</p><ul><li>对于同步的handler如CurlHandler，在此处会执行curl_exec发起请求，最终返回的是FulfilledPromise对象或RejectedPromise对象，代表请求已经处理完毕。</li><li>对于异步的handler比如CurlMultiHandler，在此处并不会执行curl_multi_exec，而是返回一个promise对象，里面注册了需要等待执行的curl_multi_exec。</li></ul><p>Curl Handler处理完成之后，往上回溯，在Allow_redirects和Http_errors部分会进入then方法，最终返回的结果都是promise对象。</p><p>返回的第一个handler其实就是choose_handler所返回的Curl Handler对象，跟踪发现__invoke方法</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__invoke</span><span class="token punctuation">(</span><span class="token class-name type-declaration">RequestInterface</span> <span class="token variable">$request</span><span class="token punctuation">,</span> <span class="token keyword type-hint">array</span> <span class="token variable">$options</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$options</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'delay'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">usleep</span><span class="token punctuation">(</span><span class="token variable">$options</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'delay'</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token variable">$easy</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">factory</span><span class="token operator">-&gt;</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">,</span> <span class="token variable">$options</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">curl_exec</span><span class="token punctuation">(</span><span class="token variable">$easy</span><span class="token operator">-&gt;</span><span class="token property">handle</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$easy</span><span class="token operator">-&gt;</span><span class="token property">errno</span> <span class="token operator">=</span> <span class="token function">curl_errno</span><span class="token punctuation">(</span><span class="token variable">$easy</span><span class="token operator">-&gt;</span><span class="token property">handle</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name static-context">CurlFactory</span><span class="token operator">::</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token punctuation">,</span> <span class="token variable">$easy</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">factory</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里发现只有curl_exec方法，平时我们使用的时候都是curl_exec直接拿到请求的值了，这里为什么没有呢，进入CurlFactory的finish方法发现最终是使用的**$easy**-&gt;response</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/** * Completes a cURL transaction, either returning a response promise or a * rejected promise. * * @param callable             $handler * @param EasyHandle           $easy * @param CurlFactoryInterface $factory Dictates how the handle is released * * @return \GuzzleHttp\Promise\PromiseInterface */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">finish</span><span class="token punctuation">(</span>    <span class="token keyword type-hint">callable</span> <span class="token variable">$handler</span><span class="token punctuation">,</span>    <span class="token class-name type-declaration">EasyHandle</span> <span class="token variable">$easy</span><span class="token punctuation">,</span>    <span class="token class-name type-declaration">CurlFactoryInterface</span> <span class="token variable">$factory</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$easy</span><span class="token operator">-&gt;</span><span class="token property">options</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'on_stats'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token function">invokeStats</span><span class="token punctuation">(</span><span class="token variable">$easy</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$easy</span><span class="token operator">-&gt;</span><span class="token class-name type-declaration">response</span>  <span class="token variable">$easy</span><span class="token operator">-&gt;</span><span class="token property">errno</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token function">finishError</span><span class="token punctuation">(</span><span class="token variable">$handler</span><span class="token punctuation">,</span> <span class="token variable">$easy</span><span class="token punctuation">,</span> <span class="token variable">$factory</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// Return the response if it is present and there is no error.</span>    <span class="token variable">$factory</span><span class="token operator">-&gt;</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token variable">$easy</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Rewind the body of the response if possible.</span>    <span class="token variable">$body</span> <span class="token operator">=</span> <span class="token variable">$easy</span><span class="token operator">-&gt;</span><span class="token property">response</span><span class="token operator">-&gt;</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$body</span><span class="token operator">-&gt;</span><span class="token function">isSeekable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$body</span><span class="token operator">-&gt;</span><span class="token function">rewind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FulfilledPromise</span><span class="token punctuation">(</span><span class="token variable">$easy</span><span class="token operator">-&gt;</span><span class="token property">response</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那就让我们看看这个$easy是什么吧，追踪代码发现是一个EasyHandler的类，在这里面通过<strong>CURLOPT_HEADERFUNCTION</strong>，<strong>CURLOPT_WRITEFUNCTION</strong>，<strong>CURLOPT_READFUNCTION</strong>这个选项，相当于给curl设置了多个handler，请求成功之后都将值处理到了$easy上面，所以外面没有进行接受返回值的操作</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">create</span><span class="token punctuation">(</span><span class="token class-name type-declaration">RequestInterface</span> <span class="token variable">$request</span><span class="token punctuation">,</span> <span class="token keyword type-hint">array</span> <span class="token variable">$options</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$options</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'curl'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'body_as_string'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$options</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'_body_as_string'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$options</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'curl'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'body_as_string'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">unset</span><span class="token punctuation">(</span><span class="token variable">$options</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'curl'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'body_as_string'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token variable">$easy</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EasyHandle</span><span class="token punctuation">;</span>    <span class="token variable">$easy</span><span class="token operator">-&gt;</span><span class="token property">request</span> <span class="token operator">=</span> <span class="token variable">$request</span><span class="token punctuation">;</span>    <span class="token variable">$easy</span><span class="token operator">-&gt;</span><span class="token property">options</span> <span class="token operator">=</span> <span class="token variable">$options</span><span class="token punctuation">;</span>    <span class="token variable">$conf</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getDefaultConf</span><span class="token punctuation">(</span><span class="token variable">$easy</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">applyMethod</span><span class="token punctuation">(</span><span class="token variable">$easy</span><span class="token punctuation">,</span> <span class="token variable">$conf</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">applyHandlerOptions</span><span class="token punctuation">(</span><span class="token variable">$easy</span><span class="token punctuation">,</span> <span class="token variable">$conf</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">applyHeaders</span><span class="token punctuation">(</span><span class="token variable">$easy</span><span class="token punctuation">,</span> <span class="token variable">$conf</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">unset</span><span class="token punctuation">(</span><span class="token variable">$conf</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'_headers'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Add handler options from the request configuration options</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$options</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'curl'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$conf</span> <span class="token operator">=</span> <span class="token function">array_replace</span><span class="token punctuation">(</span><span class="token variable">$conf</span><span class="token punctuation">,</span> <span class="token variable">$options</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'curl'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token variable">$conf</span><span class="token punctuation">[</span><span class="token constant">CURLOPT_HEADERFUNCTION</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">createHeaderFn</span><span class="token punctuation">(</span><span class="token variable">$easy</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$easy</span><span class="token operator">-&gt;</span><span class="token property">handle</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">handles</span>        <span class="token operator">?</span> <span class="token function">array_pop</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">handles</span><span class="token punctuation">)</span>        <span class="token punctuation">:</span> <span class="token class-name return-type">curl_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">curl_setopt_array</span><span class="token punctuation">(</span><span class="token variable">$easy</span><span class="token operator">-&gt;</span><span class="token property">handle</span><span class="token punctuation">,</span> <span class="token variable">$conf</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token variable">$easy</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="wait"><a href="#wait" class="headerlink" title="wait"></a>wait</h4><p>请求发送完毕，进入promise的wait操作，最终会执行promise的$waitFn函数。</p><ul><li>对于CurlMultiHandler，$waitFn即执行curl__multi__exec进行网络交互，然后调用resolve方法将response对象传递到then方法的$onFulfilled函数。</li><li>对于CurlHandler，直接利用resolve将response对象传递到$onFulfilled函数。</li></ul><p>这样，异步的then方法设置的回调就可以接收到response了。 then方法最终返回response，这个对象又可以作为返回值返回，这样同步的wait就可以通过返回值来获取response对象了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文重点介绍了Guzzle同步和异步请求的实现原理，除此之外，Guzzle还提供了并行请求，请求pool等实现，读者可以在此基础上继续深入。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>这篇文章详细讲解了guzzle及promise的实现，目前我还没仔细看promise的实现过程，准备自己先追一下代码先，<a href="https://www.chengxiaobai.com/php/guzzle-source-code-analysis">https://www.chengxiaobai.com/php/guzzle-source-code-analysis</a></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> 编程开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> guzzle </tag>
            
            <tag> http </tag>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php算法排列组合</title>
      <link href="/2022/05/23/php-suan-fa-pai-lie-zu-he/"/>
      <url>/2022/05/23/php-suan-fa-pai-lie-zu-he/</url>
      
        <content type="html"><![CDATA[<p>最近需要用的php排列组合，之前写python的时候发现python有个itertools库，里面带了很多方便的迭代方法，无奈php没有，就在网上找了一下</p><h2 id="阶乘"><a href="#阶乘" class="headerlink" title="阶乘"></a>阶乘</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function-definition function">factorial</span><span class="token punctuation">(</span><span class="token variable">$n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">array_product</span><span class="token punctuation">(</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token variable">$n</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="排列数"><a href="#排列数" class="headerlink" title="排列数"></a>排列数</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function-definition function">A</span><span class="token punctuation">(</span><span class="token variable">$n</span><span class="token punctuation">,</span> <span class="token variable">$m</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">factorial</span><span class="token punctuation">(</span><span class="token variable">$n</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">factorial</span><span class="token punctuation">(</span><span class="token variable">$n</span><span class="token operator">-</span><span class="token variable">$m</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="组合数"><a href="#组合数" class="headerlink" title="组合数"></a>组合数</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function-definition function">C</span><span class="token punctuation">(</span><span class="token variable">$n</span><span class="token punctuation">,</span> <span class="token variable">$m</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token variable">$n</span><span class="token punctuation">,</span> <span class="token variable">$m</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">factorial</span><span class="token punctuation">(</span><span class="token variable">$m</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="排列"><a href="#排列" class="headerlink" title="排列"></a>排列</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function-definition function">arrangement</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token variable">$m</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$r</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token variable">$n</span> <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$m</span> <span class="token operator">&lt;=</span> <span class="token number">0</span>  <span class="token variable">$m</span> <span class="token operator">&gt;</span> <span class="token variable">$n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$r</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token variable">$n</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token variable">$a</span><span class="token punctuation">;</span>        <span class="token variable">$t</span> <span class="token operator">=</span> <span class="token function">array_splice</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">,</span> <span class="token variable">$i</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$m</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$r</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$t</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token variable">$c</span> <span class="token operator">=</span> <span class="token function">arrangement</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">,</span> <span class="token variable">$m</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$c</span> <span class="token keyword">as</span> <span class="token variable">$v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$r</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">array_merge</span><span class="token punctuation">(</span><span class="token variable">$t</span><span class="token punctuation">,</span> <span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>     <span class="token keyword">return</span> <span class="token variable">$r</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function-definition function">combination</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token variable">$m</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$r</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token variable">$n</span> <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$m</span> <span class="token operator">&lt;=</span> <span class="token number">0</span>  <span class="token variable">$m</span> <span class="token operator">&gt;</span> <span class="token variable">$n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$r</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token variable">$n</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$t</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$m</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$r</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$t</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token function">array_slice</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token variable">$i</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$c</span> <span class="token operator">=</span> <span class="token function">combination</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">,</span> <span class="token variable">$m</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$c</span> <span class="token keyword">as</span> <span class="token variable">$v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$r</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">array_merge</span><span class="token punctuation">(</span><span class="token variable">$t</span><span class="token punctuation">,</span> <span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>     <span class="token keyword">return</span> <span class="token variable">$r</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"A"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"B"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"C"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"D"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$r</span> <span class="token operator">=</span> <span class="token function">arrangement</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$r</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$r</span> <span class="token operator">=</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$r</span><span class="token operator">.</span><span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span> <span class="token variable">$r</span> <span class="token operator">=</span> <span class="token function">combination</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$r</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$r</span> <span class="token operator">=</span> <span class="token function">C</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$r</span><span class="token operator">.</span><span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Openwrt的KMS服务，激活windows和office</title>
      <link href="/2022/05/19/openwrt-de-kms-fu-wu-ji-huo-windows-he-office/"/>
      <url>/2022/05/19/openwrt-de-kms-fu-wu-ji-huo-windows-he-office/</url>
      
        <content type="html"><![CDATA[<p>每次重装系统之后，都要在网上找激活密钥，大多不可用，费时费力，用破解软件又怕有后门，所有这里记录一下用openwrt的kms服务来激活，安全又方便</p><h2 id="激活windows"><a href="#激活windows" class="headerlink" title="激活windows"></a>激活windows</h2><h3 id="卸载WINDOWS自带密钥"><a href="#卸载WINDOWS自带密钥" class="headerlink" title="卸载WINDOWS自带密钥"></a>卸载WINDOWS自带密钥</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">slmgr /upk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="安装新密钥"><a href="#安装新密钥" class="headerlink" title="安装新密钥"></a>安装新密钥</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">slmgr /ipk W269N-WFGWX-YVC9B-4J6C9-T83GX<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>常用Windows VL版KMS激活密钥列表：</p><ul><li>Win10专业版KMS： W269N-WFGWX-YVC9B-4J6C9-T83GX</li><li>Win10企业版KMS： NPPR9-FWDCX-D2C8J-H872K-2YT43</li><li>Win10LTSB版KMS： DCPHK-NFMTC-H88MJ-PFHPY-QJ4BJ</li><li>Win10家庭版KMS： TX9XD-98N7V-6WMQ6-BX7FG-H8Q99</li><li>Win10教育版KMS： NW6C2-QMPVW-D7KKK-3GKT6-VCFB2</li><li>Win7专业版KMS： FJ82H-XT6CR-J8D7P-XQJJ2-GPDD4</li><li>Win7企业版KMS： 33PXH-7Y6KF-2VJC9-XBBR8-HVTHH</li></ul><h3 id="修改服务地址"><a href="#修改服务地址" class="headerlink" title="修改服务地址"></a>修改服务地址</h3><p>你自己的openwrt 地址或者kms服务的地址</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">slmgr /skms <span class="token number">192.168</span>.2.188<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="开始激活"><a href="#开始激活" class="headerlink" title="开始激活"></a>开始激活</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">slmgr /ato<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="激活Office"><a href="#激活Office" class="headerlink" title="激活Office"></a>激活Office</h2><h3 id="找到你的OFFICE目录"><a href="#找到你的OFFICE目录" class="headerlink" title="找到你的OFFICE目录"></a>找到你的OFFICE目录</h3><ul><li>OFFICE 2016 32位版，目录为”C:\Program Files (x86)\Microsoft Office\Office16”</li><li>OFFICE 2016 64位版, 目录为”C:\Program Files\Microsoft Office\Office16”</li></ul><h3 id="进入office目录"><a href="#进入office目录" class="headerlink" title="进入office目录"></a>进入office目录</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> “C:<span class="token punctuation">\</span>Program Files <span class="token punctuation">(</span>x86<span class="token punctuation">)</span><span class="token punctuation">\</span>Microsoft Office<span class="token punctuation">\</span>Office16”  <span class="token comment">#（双引号中对应你的实际目录）</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="切换验证地址"><a href="#切换验证地址" class="headerlink" title="切换验证地址"></a>切换验证地址</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cscript ospp.vbs /sethst:192.168.2.188<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="开始激活-1"><a href="#开始激活-1" class="headerlink" title="开始激活"></a>开始激活</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cscript ospp.vbs /act<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="提示没有licenses"><a href="#提示没有licenses" class="headerlink" title="提示没有licenses"></a>提示没有<strong>licenses</strong></h3><p>如果执行过程的时候提示<strong>No Office KMS licenses were found on the system</strong></p><p><a href="https://www.ponull.com/wp-content/uploads/2022/05/ALB8HBRNKZOZ_L9I68A.png"><img src="https://www.ponull.com/wp-content/uploads/2022/05/ALB8HBRNKZOZ_L9I68A.png"></a></p><p><strong>No Office KMS licenses were found on the system</strong></p><p>也有可能出现</p><p>ERROR CODE: 0xC004F017<br>ERROR DESCRIPTION: The Software Licensing Service reported that the license is not installed.</p><p><a href="https://www.ponull.com/wp-content/uploads/2022/05/X7VFIGVTS7GH9_@M4.png"><img src="https://www.ponull.com/wp-content/uploads/2022/05/X7VFIGVTS7GH9_@M4.png"></a></p><p>The Software Licensing Service reported that the license is not installed</p><p>需要将零售版(Retail)转成批量授权版(VOL)</p><p>如果你的Office2016安装在**Program Files(x86)**里,将下面的代码复制保存为.bat格式,然后运行</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">@echo off:ADMINopenfiles &gt;nul 2&gt;nul (echo Set UAC = CreateObject^("Shell.Application"^) &gt; "%temp%\getadmin.vbs"echo UAC.ShellExecute "%~s0", "", "", "runas", 1 &gt;&gt; "%temp%\getadmin.vbs""%temp%\getadmin.vbs" &gt;nul 2&gt;&amp;1goto:eof)del /f /q "%temp%\getadmin.vbs" &gt;nul 2&gt;nulfor /f "tokens=6 delims=[]. " %%G in ('ver') do set win=%%Gpushd "%~dp0"Title Office 2016 Retail to Volume License Converterecho Press Enter to start VL-Conversion...echo.pauseecho.cd /D "%SystemRoot%\System32"if %win% GEQ 9200 (cscript slmgr.vbs /ilc "%ProgramFiles(x86)%\Microsoft Office\root\Licenses16\ProPlusVL_KMS_Client-ppd.xrm-ms"cscript slmgr.vbs /ilc "%ProgramFiles(x86)%\Microsoft Office\root\Licenses16\ProPlusVL_KMS_Client-ul.xrm-ms"cscript slmgr.vbs /ilc "%ProgramFiles(x86)%\Microsoft Office\root\Licenses16\ProPlusVL_KMS_Client-ul-oob.xrm-ms"cscript slmgr.vbs /ilc "%ProgramFiles(x86)%\Microsoft Office\root\Licenses16\ProjectProVL_KMS_Client-ppd.xrm-ms"cscript slmgr.vbs /ilc "%ProgramFiles(x86)%\Microsoft Office\root\Licenses16\ProjectProVL_KMS_Client-ul-oob.xrm-ms"cscript slmgr.vbs /ilc "%ProgramFiles(x86)%\Microsoft Office\root\Licenses16\ProjectProVL_KMS_Client-ul.xrm-ms"cscript slmgr.vbs /ilc "%ProgramFiles(x86)%\Microsoft Office\root\Licenses16\VisioProVL_KMS_Client-ppd.xrm-ms"cscript slmgr.vbs /ilc "%ProgramFiles(x86)%\Microsoft Office\root\Licenses16\VisioProVL_KMS_Client-ul-oob.xrm-ms"cscript slmgr.vbs /ilc "%ProgramFiles(x86)%\Microsoft Office\root\Licenses16\VisioProVL_KMS_Client-ul.xrm-ms"cscript slmgr.vbs /ilc "%ProgramFiles(x86)%\Microsoft Office\root\Licenses16\client-issuance-bridge-office.xrm-mscscript slmgr.vbs /ilc "%ProgramFiles(x86)%\Microsoft Office\root\Licenses16\client-issuance-root.xrm-mscscript slmgr.vbs /ilc "%ProgramFiles(x86)%\Microsoft Office\root\Licenses16\client-issuance-root-bridge-test.xrm-mscscript slmgr.vbs /ilc "%ProgramFiles(x86)%\Microsoft Office\root\Licenses16\client-issuance-stil.xrm-mscscript slmgr.vbs /ilc "%ProgramFiles(x86)%\Microsoft Office\root\Licenses16\client-issuance-ul.xrm-mscscript slmgr.vbs /ilc "%ProgramFiles(x86)%\Microsoft Office\root\Licenses16\client-issuance-ul-oob.xrm-mscscript slmgr.vbs /ilc "%ProgramFiles(x86)%\Microsoft Office\root\Licenses16\pkeyconfig-office.xrm-ms)if %win% LSS 9200 (cscript "%ProgramFiles(x86)%\Microsoft Office\Office16\ospp.vbs" /inslic:"%ProgramFiles(x86)%\Microsoft Office\root\Licenses16\ProPlusVL_KMS_Client-ppd.xrm-ms"cscript "%ProgramFiles(x86)%\Microsoft Office\Office16\ospp.vbs" /inslic:"%ProgramFiles(x86)%\Microsoft Office\root\Licenses16\ProPlusVL_KMS_Client-ul.xrm-ms"cscript "%ProgramFiles(x86)%\Microsoft Office\Office16\ospp.vbs" /inslic:"%ProgramFiles(x86)%\Microsoft Office\root\Licenses16\ProPlusVL_KMS_Client-ul-oob.xrm-ms"cscript "%ProgramFiles(x86)%\Microsoft Office\Office16\ospp.vbs" /inslic:"%ProgramFiles(x86)%\Microsoft Office\root\Licenses16\ProjectProVL_KMS_Client-ppd.xrm-ms"cscript "%ProgramFiles(x86)%\Microsoft Office\Office16\ospp.vbs" /inslic:"%ProgramFiles(x86)%\Microsoft Office\root\Licenses16\ProjectProVL_KMS_Client-ul-oob.xrm-ms"cscript "%ProgramFiles(x86)%\Microsoft Office\Office16\ospp.vbs" /inslic:"%ProgramFiles(x86)%\Microsoft Office\root\Licenses16\ProjectProVL_KMS_Client-ul.xrm-ms"cscript "%ProgramFiles(x86)%\Microsoft Office\Office16\ospp.vbs" /inslic:"%ProgramFiles(x86)%\Microsoft Office\root\Licenses16\VisioProVL_KMS_Client-ppd.xrm-ms"cscript "%ProgramFiles(x86)%\Microsoft Office\Office16\ospp.vbs" /inslic:"%ProgramFiles(x86)%\Microsoft Office\root\Licenses16\VisioProVL_KMS_Client-ul-oob.xrm-ms"cscript "%ProgramFiles(x86)%\Microsoft Office\Office16\ospp.vbs" /inslic:"%ProgramFiles(x86)%\Microsoft Office\root\Licenses16\VisioProVL_KMS_Client-ul.xrm-ms"cscript "%ProgramFiles(x86)%\Microsoft Office\Office16\ospp.vbs" /inslic:"%ProgramFiles(x86)%\Microsoft Office\root\Licenses16\client-issuance-bridge-office.xrm-mscscript "%ProgramFiles(x86)%\Microsoft Office\Office16\ospp.vbs" /inslic:"%ProgramFiles(x86)%\Microsoft Office\root\Licenses16\client-issuance-root.xrm-mscscript "%ProgramFiles(x86)%\Microsoft Office\Office16\ospp.vbs" /inslic:"%ProgramFiles(x86)%\Microsoft Office\root\Licenses16\client-issuance-root-bridge-test.xrm-mscscript "%ProgramFiles(x86)%\Microsoft Office\Office16\ospp.vbs" /inslic:"%ProgramFiles(x86)%\Microsoft Office\root\Licenses16\client-issuance-stil.xrm-mscscript "%ProgramFiles(x86)%\Microsoft Office\Office16\ospp.vbs" /inslic:"%ProgramFiles(x86)%\Microsoft Office\root\Licenses16\client-issuance-ul.xrm-mscscript "%ProgramFiles(x86)%\Microsoft Office\Office16\ospp.vbs" /inslic:"%ProgramFiles(x86)%\Microsoft Office\root\Licenses16\client-issuance-ul-oob.xrm-mscscript "%ProgramFiles(x86)%\Microsoft Office\Office16\ospp.vbs" /inslic:"%ProgramFiles(x86)%\Microsoft Office\root\Licenses16\pkeyconfig-office.xrm-ms)echo.echo Retail to Volume License conversion finished.echo.pause<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果你的Office2016安装在<strong>Program Files</strong>里,将下面的代码复制保存为.bat格式,然后运行</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">@echo off:ADMINopenfiles &gt;nul 2&gt;nul (echo Set UAC = CreateObject^("Shell.Application"^) &gt; "%temp%\getadmin.vbs"echo UAC.ShellExecute "%~s0", "", "", "runas", 1 &gt;&gt; "%temp%\getadmin.vbs""%temp%\getadmin.vbs" &gt;nul 2&gt;&amp;1goto:eof)del /f /q "%temp%\getadmin.vbs" &gt;nul 2&gt;nulfor /f "tokens=6 delims=[]. " %%G in ('ver') do set win=%%Gpushd "%~dp0"Title Office 2016 Retail to Volume License Converterecho Press Enter to start VL-Conversion...echo.pauseecho.cd /D "%SystemRoot%\System32"if %win% GEQ 9200 (cscript slmgr.vbs /ilc "%ProgramFiles%\Microsoft Office\root\Licenses16\ProPlusVL_KMS_Client-ppd.xrm-ms"cscript slmgr.vbs /ilc "%ProgramFiles%\Microsoft Office\root\Licenses16\ProPlusVL_KMS_Client-ul.xrm-ms"cscript slmgr.vbs /ilc "%ProgramFiles%\Microsoft Office\root\Licenses16\ProPlusVL_KMS_Client-ul-oob.xrm-ms"cscript slmgr.vbs /ilc "%ProgramFiles%\Microsoft Office\root\Licenses16\ProjectProVL_KMS_Client-ppd.xrm-ms"cscript slmgr.vbs /ilc "%ProgramFiles%\Microsoft Office\root\Licenses16\ProjectProVL_KMS_Client-ul-oob.xrm-ms"cscript slmgr.vbs /ilc "%ProgramFiles%\Microsoft Office\root\Licenses16\ProjectProVL_KMS_Client-ul.xrm-ms"cscript slmgr.vbs /ilc "%ProgramFiles%\Microsoft Office\root\Licenses16\VisioProVL_KMS_Client-ppd.xrm-ms"cscript slmgr.vbs /ilc "%ProgramFiles%\Microsoft Office\root\Licenses16\VisioProVL_KMS_Client-ul-oob.xrm-ms"cscript slmgr.vbs /ilc "%ProgramFiles%\Microsoft Office\root\Licenses16\VisioProVL_KMS_Client-ul.xrm-ms"cscript slmgr.vbs /ilc "%ProgramFiles%\Microsoft Office\root\Licenses16\client-issuance-bridge-office.xrm-mscscript slmgr.vbs /ilc "%ProgramFiles%\Microsoft Office\root\Licenses16\client-issuance-root.xrm-mscscript slmgr.vbs /ilc "%ProgramFiles%\Microsoft Office\root\Licenses16\client-issuance-root-bridge-test.xrm-mscscript slmgr.vbs /ilc "%ProgramFiles%\Microsoft Office\root\Licenses16\client-issuance-stil.xrm-mscscript slmgr.vbs /ilc "%ProgramFiles%\Microsoft Office\root\Licenses16\client-issuance-ul.xrm-mscscript slmgr.vbs /ilc "%ProgramFiles%\Microsoft Office\root\Licenses16\client-issuance-ul-oob.xrm-mscscript slmgr.vbs /ilc "%ProgramFiles%\Microsoft Office\root\Licenses16\pkeyconfig-office.xrm-ms)if %win% LSS 9200 (cscript "%ProgramFiles%\Microsoft Office\Office16\ospp.vbs" /inslic:"%ProgramFiles%\Microsoft Office\root\Licenses16\ProPlusVL_KMS_Client-ppd.xrm-ms"cscript "%ProgramFiles%\Microsoft Office\Office16\ospp.vbs" /inslic:"%ProgramFiles%\Microsoft Office\root\Licenses16\ProPlusVL_KMS_Client-ul.xrm-ms"cscript "%ProgramFiles%\Microsoft Office\Office16\ospp.vbs" /inslic:"%ProgramFiles%\Microsoft Office\root\Licenses16\ProPlusVL_KMS_Client-ul-oob.xrm-ms"cscript "%ProgramFiles%\Microsoft Office\Office16\ospp.vbs" /inslic:"%ProgramFiles%\Microsoft Office\root\Licenses16\ProjectProVL_KMS_Client-ppd.xrm-ms"cscript "%ProgramFiles%\Microsoft Office\Office16\ospp.vbs" /inslic:"%ProgramFiles%\Microsoft Office\root\Licenses16\ProjectProVL_KMS_Client-ul-oob.xrm-ms"cscript "%ProgramFiles%\Microsoft Office\Office16\ospp.vbs" /inslic:"%ProgramFiles%\Microsoft Office\root\Licenses16\ProjectProVL_KMS_Client-ul.xrm-ms"cscript "%ProgramFiles%\Microsoft Office\Office16\ospp.vbs" /inslic:"%ProgramFiles%\Microsoft Office\root\Licenses16\VisioProVL_KMS_Client-ppd.xrm-ms"cscript "%ProgramFiles%\Microsoft Office\Office16\ospp.vbs" /inslic:"%ProgramFiles%\Microsoft Office\root\Licenses16\VisioProVL_KMS_Client-ul-oob.xrm-ms"cscript "%ProgramFiles%\Microsoft Office\Office16\ospp.vbs" /inslic:"%ProgramFiles%\Microsoft Office\root\Licenses16\VisioProVL_KMS_Client-ul.xrm-ms"cscript "%ProgramFiles%\Microsoft Office\Office16\ospp.vbs" /inslic:"%ProgramFiles%\Microsoft Office\root\Licenses16\client-issuance-bridge-office.xrm-mscscript "%ProgramFiles%\Microsoft Office\Office16\ospp.vbs" /inslic:"%ProgramFiles%\Microsoft Office\root\Licenses16\client-issuance-root.xrm-mscscript "%ProgramFiles%\Microsoft Office\Office16\ospp.vbs" /inslic:"%ProgramFiles%\Microsoft Office\root\Licenses16\client-issuance-root-bridge-test.xrm-mscscript "%ProgramFiles%\Microsoft Office\Office16\ospp.vbs" /inslic:"%ProgramFiles%\Microsoft Office\root\Licenses16\client-issuance-stil.xrm-mscscript "%ProgramFiles%\Microsoft Office\Office16\ospp.vbs" /inslic:"%ProgramFiles%\Microsoft Office\root\Licenses16\client-issuance-ul.xrm-mscscript "%ProgramFiles%\Microsoft Office\Office16\ospp.vbs" /inslic:"%ProgramFiles%\Microsoft Office\root\Licenses16\client-issuance-ul-oob.xrm-mscscript "%ProgramFiles%\Microsoft Office\Office16\ospp.vbs" /inslic:"%ProgramFiles%\Microsoft Office\root\Licenses16\pkeyconfig-office.xrm-ms)echo.echo Retail to Volume License conversion finished.echo.pause<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ERROR-CODE-0x4004F00C解决办法"><a href="#ERROR-CODE-0x4004F00C解决办法" class="headerlink" title="ERROR CODE: 0x4004F00C解决办法"></a><strong>ERROR CODE: 0x4004F00C解决办法</strong></h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cscript ospp.vbs /dstatus<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="https://www.ponull.com/wp-content/uploads/2022/05/LZHHS7P1@YP@NQHXI.png"><img src="https://www.ponull.com/wp-content/uploads/2022/05/LZHHS7P1@YP@NQHXI.png"></a></p><p>查看，有许可证出现ERROR CODE: 0x4004F00C,删除这个(可能有多个),然后产品密钥重新添加</p><p>移除产品密钥</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cscript ospp.vbs /unpkey:XXXXX <span class="token comment">#XXXXX为后面的数字是密钥的最后5位</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="https://www.ponull.com/wp-content/uploads/2022/05/8HOW8LNV_K7MCEDBR1L.png"><img src="https://www.ponull.com/wp-content/uploads/2022/05/8HOW8LNV_K7MCEDBR1L.png"></a></p><p>unpkey:XXXXX</p><p>安装产品密匙</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cscript ospp.vbs /inpkey:XQNVK-8JYDB-WJ9W3-YJ8YR-WFG99 <span class="token comment">#这个是我网上找到的Office Professional Plus 2016密匙,如不能用自己找密匙替换</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="https://www.ponull.com/wp-content/uploads/2022/05/OYL3CGCOY_HH6MGWFK.png"><img src="https://www.ponull.com/wp-content/uploads/2022/05/OYL3CGCOY_HH6MGWFK.png"></a></p><p>inpkey:XQNVK-8JYDB-WJ9W3-YJ8YR-WFG99</p><p>安装成功会提示<code>&lt;Product key installation successful&gt;</code>,再执行 **<code>cscript ospp.vbs /act</code>**即可激活Office</p><p><a href="https://www.ponull.com/wp-content/uploads/2022/05/5J5GOJK2YLSLBCWM41MB.png"><img src="https://www.ponull.com/wp-content/uploads/2022/05/5J5GOJK2YLSLBCWM41MB.png"></a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://amahv.github.io/2020/07/13/ji-yu-openwrt-gu-jian-da-jian-kms-fu-wu-qi-ji-huo-windows-office/">https://amahv.github.io/2020/07/13/ji-yu-openwrt-gu-jian-da-jian-kms-fu-wu-qi-ji-huo-windows-office/</a></p><p><a href="https://0w0.pw/216.html">https://0w0.pw/216.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 实用工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>openwrt抓包</title>
      <link href="/2022/05/10/openwrt-zhua-bao/"/>
      <url>/2022/05/10/openwrt-zhua-bao/</url>
      
        <content type="html"><![CDATA[<h2 id="在OpenWrt路由下安装-tcpdump"><a href="#在OpenWrt路由下安装-tcpdump" class="headerlink" title="在OpenWrt路由下安装 tcpdump"></a><strong>在OpenWrt路由下安装 tcpdump</strong></h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">opkg updateopkg <span class="token function">install</span> tcpdump<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="在电脑装wireshark-和plink-exe"><a href="#在电脑装wireshark-和plink-exe" class="headerlink" title="在电脑装wireshark 和plink.exe"></a><strong>在电脑装wireshark 和plink.exe</strong></h2><p>去这里下载这两个软件<br><a href="https://www.wireshark.org/download.html">https://www.wireshark.org/download.html</a><br><a href="http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html">http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html</a></p><h2 id="路由下tcpdump抓包，PC端使用-wireshark-实时监听"><a href="#路由下tcpdump抓包，PC端使用-wireshark-实时监听" class="headerlink" title="路由下tcpdump抓包，PC端使用 wireshark 实时监听"></a><strong>路由下tcpdump抓包，PC端使用 wireshark 实时监听</strong></h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">.<span class="token punctuation">\</span>plink.exe <span class="token parameter variable">-batch</span> <span class="token parameter variable">-ssh</span> <span class="token parameter variable">-pw</span> <span class="token number">123456</span> root@10.0.0.1 <span class="token string">"tcpdump -ni br-lan -s 0 -w - not port 22"</span>  D:<span class="token punctuation">\</span>devTools<span class="token punctuation">\</span>Wireshark<span class="token punctuation">\</span>wireshark.exe <span class="token parameter variable">-k</span> <span class="token parameter variable">-i</span> -<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>root表示路由用户名</strong></li><li><strong>123456表示路由登录密码</strong></li><li><strong>10.0.0.1表示路由IP</strong></li></ul><p>cmd执行，别在powershell执行，我在powershell执行会提示和没有加-batch一样的提示</p><p>请注意<strong>-batch</strong>参数,一定不能省,网上很多教程都是不带这个参数的,导致的结果wireshark可能会出现 “Data written to the pipe is neither in a supported pcap”,这是因为数据还有传输给wireshark的时候,wireshark就去读数据了,所以会造成数据错误,一直失败.</p><h2 id="分析数据报文，获取敏感信息"><a href="#分析数据报文，获取敏感信息" class="headerlink" title="分析数据报文，获取敏感信息"></a><strong>分析数据报文，获取敏感信息</strong></h2><p>假如你使用了我的wifi，登录了百度的主页，我就获取你的登录cookies，<br>有了cookies可以不用密就能登录你的百度账号， 浏览你的各种百度云盘里面的内容。<br>wireshark 添加过滤的条件“http.cookie“， 获取cookies的相关报文，点中右键，follow tcp steam，看到完整的报文，<br>复制 http 请求时向服务器发送的cookies 字符串</p><h2 id="注入cookies，登录账号"><a href="#注入cookies，登录账号" class="headerlink" title="注入cookies，登录账号"></a><strong>注入cookies，登录账号</strong></h2><p>chrome 下使用一个 CookieHacker的插件 ，下载 <a href="http://evilcos.me/?p=366">http://evilcos.me/?p=366</a><br>打开 baidu.com，把cookies的字符串粘贴，点击inject cookie</p><h2 id="附加福利"><a href="#附加福利" class="headerlink" title="附加福利"></a><strong>附加福利</strong></h2><p>下面这一条命令用于在OpenWrt路由器上直接保存dump的数据</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/usr/sbin/tcpdump <span class="token parameter variable">-ni</span> br-lan not port <span class="token number">22</span> <span class="token parameter variable">-s</span> <span class="token number">0</span>  <span class="token parameter variable">-w</span>  /mnt/sda3/tcpdump/net.cap<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.bgegao.com/2020/02/1574.html">https://www.bgegao.com/2020/02/1574.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 实用工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>使用CloudFlare加速wordpress访问</title>
      <link href="/2022/05/09/shi-yong-cloudflare-jia-su-wordpress-fang-wen/"/>
      <url>/2022/05/09/shi-yong-cloudflare-jia-su-wordpress-fang-wen/</url>
      
        <content type="html"><![CDATA[<p>由于我的服务器不在国内，访问感觉太慢了，就搜索了一下CDN加速，发现cloudflare是免费的，而且效果也好，就试试。</p><h2 id="CloudFlare"><a href="#CloudFlare" class="headerlink" title="CloudFlare"></a>CloudFlare</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>cloudflare 是一家国外的 CDN 加速服务商，还是很有名气的。提供免费和付费的加速和网站保护服务。百度云加速的国外节点就是和 cloudflare 合作使用的 cloudflare 的节点。</p><p>cloudflare 提供了不同类型的套餐，即使是免费用户，cloudflare 提供的功能也是很全面的。</p><p>对于访客来自于国外的网站很不错；对于访客来自于国内的网站加速效果有限，有些甚至会变慢，不过其安全防护功能也很不错。</p><h3 id="添加网站"><a href="#添加网站" class="headerlink" title="添加网站"></a>添加网站</h3><p>官网：<a href="https://www.cloudflare.com/">www.cloudflare.com</a></p><p>使用邮箱注册，注册完后自动进入添加网站界面。添加网站分为四步：添加网站域名、添加DNS记录、选择方案、更新域名服务器。</p><p><a href="https://www.ponull.com/wp-content/uploads/2022/05/v2-ebeaa66f209db0afa00a8546cb98de80_b.jpg"><img src="https://www.ponull.com/wp-content/uploads/2022/05/v2-ebeaa66f209db0afa00a8546cb98de80_b.jpg"></a></p><p>填入自己的主域名（不带 www 的），“Scan DNS Records”。</p><h3 id="添加DNS记录"><a href="#添加DNS记录" class="headerlink" title="添加DNS记录"></a>添加DNS记录</h3><p>添加完成后会自动扫描 DNS 记录，等待完成，“Continue”。</p><p>下面会列出所有扫描到的 DNS 记录。黄色云朵表示该解析通过 CDN 访问，灰色云朵表示不通过 CDN 访问，点击云朵可以切换状态。<strong>这里如果选择不走 CDN 的话，相当于只使用 cloudflare 的 DNS 功能。</strong></p><p>这里建议全部调为黄色云朵走 CDN 访问，隐藏网站真实 IP 地址。全站通过 CDN 访问可以有效防止网站真实IP泄漏，保护原站安全。</p><p>记录简单的话可以直接按默认条目；如果没有扫描出来原记录或要手动添加，建议至少添加 @ 和 www 两条指向原网站 IP 的 A 记录，TTL 默认。</p><h3 id="选择方案"><a href="#选择方案" class="headerlink" title="选择方案"></a>选择方案</h3><p>选择适合自己的方案，一般小站博客免费方案就够了。当然，有更高需求的可按需选择付费方案。</p><p><a href="https://www.ponull.com/wp-content/uploads/2022/05/v2-05b79fdeaf3bbfaaf1eca5dcfc650f50_b.jpg"><img src="https://www.ponull.com/wp-content/uploads/2022/05/v2-05b79fdeaf3bbfaaf1eca5dcfc650f50_b.jpg"></a></p><h3 id="更新域名服务器"><a href="#更新域名服务器" class="headerlink" title="更新域名服务器"></a>更新域名服务器</h3><p>右侧是新的域名服务器。进入域名管理面板，更改域名服务器为新的。</p><p><a href="https://www.ponull.com/wp-content/uploads/2022/05/v2-948ac1bd2f9a812ce7f559a1c2262c01_b.jpg"><img src="https://www.ponull.com/wp-content/uploads/2022/05/v2-948ac1bd2f9a812ce7f559a1c2262c01_b.jpg"></a></p><h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><p>DNS 刷新生效需要时间，可耐心等待。</p><ul><li>刷新本地 DNS<ul><li>cmd 运行 ipconfig /flushdns</li></ul></li><li>查看域名服务器<ul><li>cmd 运行 nslookup —&gt; 回车 —&gt; set type=ns —&gt; 回车 —&gt; 域名</li></ul></li><li>等生效后，再 ping 自己的域名，显示出来的就应该是 cloudflare 节点的 IP 地址了。</li></ul><h2 id="修改域名DNS服务器为cloudflare提供的"><a href="#修改域名DNS服务器为cloudflare提供的" class="headerlink" title="修改域名DNS服务器为cloudflare提供的"></a>修改域名DNS服务器为cloudflare提供的</h2><p>各家域名服务商操作方式不同，这里就不列举了</p><p>我的是namesilo的，我参考的<a href="https://blog.naibabiji.com/tutorial/namesilo-yu-ming-jie-xi-geng-huan-dns-jiao-cheng.html">https://blog.naibabiji.com/tutorial/namesilo-yu-ming-jie-xi-geng-huan-dns-jiao-cheng.html</a></p><h2 id="Wordpress安装cloudflare插件"><a href="#Wordpress安装cloudflare插件" class="headerlink" title="Wordpress安装cloudflare插件"></a>Wordpress安装cloudflare插件</h2><p>wordpress直接搜索cloudflare，安装之前记得去cloudeflare获取api令牌，添加一个，模板就选择wordpress的就可以了，这个令牌要记住，需要在插件填写</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/senro/p/Blog01_L_S.html">https://www.cnblogs.com/senro/p/Blog01_L_S.html</a></p><p><a href="https://zhuanlan.zhihu.com/p/29891330">https://zhuanlan.zhihu.com/p/29891330</a></p><p><a href="http://www.idcbaby.com/64289/">http://www.idcbaby.com/64289/</a></p>]]></content>
      
      
      <categories>
          
          <category> 实用工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>json_encode返回空</title>
      <link href="/2022/05/07/json-encode-fan-hui-kong/"/>
      <url>/2022/05/07/json-encode-fan-hui-kong/</url>
      
        <content type="html"><![CDATA[<p>有时候我们对一个对象或者数组进行json编码的时候，返回为空，大概是因为里面的数字类型出现了INF 和 NAN，其实这里会报warning的，只是我们一般忽略了warning不展示</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">//$output = json_encode($rt);  改成下面这个  否则php高版本会有Inf and NaN cannot be JSON encoded  的错误</span><span class="token variable">$output</span> <span class="token operator">=</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'NAN;'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'INF;'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'0;'</span><span class="token punctuation">,</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$rt</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>网关，网段，IP，子网掩码</title>
      <link href="/2022/05/06/wang-guan-wang-duan-ip-zi-wang-yan-ma/"/>
      <url>/2022/05/06/wang-guan-wang-duan-ip-zi-wang-yan-ma/</url>
      
        <content type="html"><![CDATA[<p>在开发时，我们经常会遇见输入127.0.0.1，192.168.1.1，255.255.255.0这样的数字，也都知道分内网和外网，但是对其中原理其实一点都不明白，今天特意搜索了一下这几个的关系，大致弄明白了。</p><h2 id="网关"><a href="#网关" class="headerlink" title="网关"></a>网关</h2><h3 id="什么是网关"><a href="#什么是网关" class="headerlink" title="什么是网关"></a>什么是网关</h3><p>网关 (Gateway) 又称网间连接器、协议转换器。网关在传输层上以实现网络互连，是最复杂的网络互连设备，仅用于两个高层协议不同的网络互连。</p><h3 id="如何来理解网关"><a href="#如何来理解网关" class="headerlink" title="如何来理解网关"></a><strong>如何来理解网关</strong></h3><p>大家都知道，从一个房间走到另一个房间，必然要经过<strong>一扇门</strong>。同样，从一个网络向另一个网络发送信息，也必须经过一道 “关口”，这道关口就是网关。顾名思义，网关(Gateway) 就是一个网络连接到另一个网络的“<strong>关口</strong>”。</p><p>按照不同的分类标准，网关也有很多种。TCP/IP 协议里的网关是最常用的，在这里我们所讲的 “网关” 均指 TCP/IP 协议下的网关。</p><h3 id="网关的-ip-地址"><a href="#网关的-ip-地址" class="headerlink" title="网关的 ip 地址"></a><strong>网关的 ip 地址</strong></h3><p><strong>那么网关到底是什么呢？</strong></p><p>网关实质上是一个网络通向其他网络的 IP 地址，网关在网段内的可用 ip 中选一个，不过，一般用的是第 1 个和最后一个。并非192.168.1.255，此地址用于广播</p><p><strong>例如</strong></p><p>比如有网络 A 和网络 B，</p><p><strong>网络 A：</strong>的 IP 地址范围为 “192.168.1.1~192. 168.1.254”，子网掩 255.255.255.0；</p><p>如果需要与其它网段通信，那么它的网关可以设置为192.168.1.1，当然也可以设置为<strong>网段内</strong>其它的一个 ip 地址。</p><p><strong>网络 B：</strong>的 IP 地址范为 “192.168.2.1~192.168.2.254”，子网掩码 255.255.255.0。</p><p>如果需要与其它网段通信，那么它的网关可以设置为 192.168.2.1，当然也可以设置为<strong>网段内</strong>其它的一个 ip 地址。</p><h3 id="网关是如何实现通信？"><a href="#网关是如何实现通信？" class="headerlink" title="网关是如何实现通信？"></a><strong>网关是如何实现通信？</strong></h3><p>在没有<strong>路由器</strong>的情况下，不同的两个网络之间是<strong>不能</strong>进行 TCP/IP 通信的，即使是两个网络连接在同一台交换机 (或集线器) 上，TCP/IP 协议也会根据子网掩码 (255.255.255.0) 判定两个网络中的主机处在不同的网络里。而要实现这两个网络之间的通信，则<strong>必须通过网关</strong>。</p><p>如果<strong>网络 A</strong>中的主机发现<strong>数据包</strong>的目的主机<strong>不在</strong>本地网络中，就把数据包转发给它<strong>自己的网关</strong>，再由网关转发给网络 B 的网关，网络 B 的网关再转发给网络 B 的某个主机 (如附图所示)。网络 B 向网络 A 转发数据包的过程。</p><p>所以说，只有设置好网关的 <strong>IP 地址</strong>，TCP/IP 协议才能实现不同网络之间的相互通信。</p><h3 id="什么是默认网关？"><a href="#什么是默认网关？" class="headerlink" title="什么是默认网关？"></a><strong>什么是默认网关？</strong></h3><p>如果搞清了什么是网关，默认网关也就好理解了。就好像一个房间可以有多扇门一样，一台主机可以有多个网关。<strong>默认网关</strong>的意思是一台主机如果找不到可用的网关，就把数据包发给默认<strong>指定的网关</strong>，由这个网关来处理数据包。现在<strong>主机</strong>使用的网关，一般指的是默认网关。</p><h2 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h2><h3 id="公有IP地址分类"><a href="#公有IP地址分类" class="headerlink" title="公有IP地址分类"></a>公有IP地址分类</h3><ul><li>A类：<strong>1.0.0.0</strong>到<strong>127.255.255.255</strong>主要分配 给大量主机而局域网网络数量较少的大型网络</li><li>B类：<strong>128.0.0.0</strong>到<strong>191.255.255.255</strong>一般用于国际性大公司和政府机构</li><li>C类：<strong>192.0.0.0</strong>到<strong>223.255.255.255</strong>用于一般小公司校园网研究机构等</li><li>D类：<strong>224.0.0.0</strong>到<strong>239.255.255.255</strong>用于特殊用途，又称做广播地址</li><li>E类：<strong>240.0.0.0</strong>到<strong>255.255.255.255</strong>暂时保留</li></ul><h3 id="私有IP地址"><a href="#私有IP地址" class="headerlink" title="私有IP地址"></a>私有IP地址</h3><ul><li>A类：<strong>10.0.0.0</strong>到<strong>10.255.255.255</strong></li><li>B类：<strong>172.16.0.0</strong>到<strong>172.31.255.255</strong></li><li>C类：<strong>192.168.0.0</strong>到<strong>192.168.255.255</strong></li><li>其中<strong>127.0.0.0</strong>到<strong>127.255.255.255</strong>为系统环回地址</li></ul><h2 id="子网掩码"><a href="#子网掩码" class="headerlink" title="子网掩码"></a>子网掩码</h2><p>子网掩码不能单独存在，它必须结合IP地址一起使用。子网掩码只有一个作用：将某个IP地址划分成网络地址和主机地址两部分。通俗的话，就是用来分割子网和区分那些ip是同一个网段的，那些不是同一网段的。</p><p>例如，两个人都叫张三，但一个张三是张家村的，另一个张三是张村的，那么如何区分这两个张三分别是属于那个村的呢?得让村长来区分，就可以准确的把各自的张三领回村，那么子网掩码就相当于村长，它就是用来区分ip该ip地址是属于那个网段的。</p><p><strong>C类</strong>私有地址<strong>192.168.x.x</strong>以子网掩码<strong>255.255.255.0</strong> ，首先，将10进制子网掩码转换成二进制，如下如所示，一共是有8个0，那就是2的8次方，等于256，这个子网掩码最多可以容纳（256-2）=254台电脑。，因为规定每个子网的第一个IP地址<strong>192.168.1.0</strong>为网段地址，最后一个IP地址<strong>192.168.1.255</strong>为广播地址，所以不可用。</p><p><a href="https://www.ponull.com/wp-content/uploads/2022/05/1500853-20190630214626317-1275002351.png"><img src="https://www.ponull.com/wp-content/uploads/2022/05/1500853-20190630214626317-1275002351.png"></a></p><p>子网掩码</p><h2 id="NAT网络地址转换"><a href="#NAT网络地址转换" class="headerlink" title="NAT网络地址转换"></a><strong>NAT网络地址转换</strong></h2><p>私网地址只能在局域网中使用，不同的局域网可以使用同样的私网地址，私网地址是不能出现在Internet上的。那么私网地址如何访问互联网呢？这就需要用到NAT地址转换，将内网地址映射到外网地址。而NAT地址转换它实现内网的IP地址与公网的地址之间的相互转换，将大量的内网IP地址转换为一个或少量的公网IP地址，减少对公网IP地址的占用。</p><p>　　家庭网络普遍使用端口映射的方式，NAT的核心是一张映射表（源IP地址，源端口，目的IP地址，目的端口），将内网源IP地址和端口映射到同一个公网地址的不同端口，如下图所示。</p><p><a href="https://www.ponull.com/wp-content/uploads/2022/05/f2b566ce673e42e6b8f6a7ff877142ad.jpeg"><img src="https://www.ponull.com/wp-content/uploads/2022/05/f2b566ce673e42e6b8f6a7ff877142ad.jpeg"></a></p><p>nat网络地址转换</p><p>总之，家庭网络由于网络规模比较小，通常使用了192.168开头的私网地址，光猫拨号获取了一个公网地址（或者运营商私网地址），通过NAT方式的映射到这个公网地址的不同端口，访问互联网。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/jimmy-share/p/11108967.html">https://www.cnblogs.com/jimmy-share/p/11108967.html</a></p><p><a href="http://www.supcomtt.com/a/zhishi/2019/0919/245.html">http://www.supcomtt.com/a/zhishi/2019/0919/245.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 闲来杂谈 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Codemirror在线代码编辑器</title>
      <link href="/2022/05/05/codemirror-zai-xian-dai-ma-bian-ji-qi/"/>
      <url>/2022/05/05/codemirror-zai-xian-dai-ma-bian-ji-qi/</url>
      
        <content type="html"><![CDATA[<p>之前写vue用过codemirror实现类似钉钉表单设计那个位置的自定义标题，感觉挺好用。不过没有记录使用说明，这次写公司项目的sql更新功能，为了让sql语句能够高亮，就再次引入了codemirror</p><p>CodeMirror可以在线编辑代码，风格包括js, java, php, c++等等100多种语言。比较强大可以自行配置语言模式。能够做到自动补全，代码折叠，可配置键盘事件，vim， emacs， sublime text 风格、能完成查找替换，括号匹配，分栏显示，显示行号，自行配置字体大小和风格，等等等等。。。</p><h2 id="引入Codemirror"><a href="#引入Codemirror" class="headerlink" title="引入Codemirror"></a>引入Codemirror</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">//引入css<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.bootcdn.net/ajax/libs/codemirror/5.65.3/codemirror.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>//引入js<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.bootcdn.net/ajax/libs/codemirror/5.65.3/codemirror.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这样引入就可以直接实例化出codemirror了，不过还没有设置主题和指定语言</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">//引入主题样式， 我比较喜欢这个idea风格的主题就用这个了<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.bootcdn.net/ajax/libs/codemirror/5.65.3/theme/darcula.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>//引入sql语句验证<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.bootcdn.net/ajax/libs/codemirror/5.65.3/addon/hint/sql-hint.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>//引入sql关键字高亮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.bootcdn.net/ajax/libs/codemirror/5.65.3/mode/sql/sql.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>通过调用CodeMirror.fromTextArea（）方法或者CodeMirror（）方法初始化配置。(更多配置见官网)</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> codeMirrorEditor <span class="token operator">=</span> CodeMirror<span class="token punctuation">.</span><span class="token function">fromTextArea</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'targetSql'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">'text/x-mysql'</span><span class="token punctuation">,</span><span class="token comment">//实现mysql语法高亮</span>    <span class="token literal-property property">theme</span><span class="token operator">:</span> <span class="token string">'darcula'</span><span class="token punctuation">,</span><span class="token comment">//指定darcula主题，前提是要引入</span>    <span class="token literal-property property">indentWithTabs</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//代码折叠</span>    <span class="token literal-property property">smartIndent</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token literal-property property">lineNumbers</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//显示行号</span>    <span class="token literal-property property">matchBrackets</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//括号匹配</span>    <span class="token literal-property property">autofocus</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token literal-property property">extraKeys</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token string-property property">"Ctrl-Space"</span><span class="token operator">:</span> <span class="token string">"autocomplete"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">//ctrl-space唤起智能提示</span>    <span class="token literal-property property">hintOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">tables</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">users</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"score"</span><span class="token punctuation">,</span> <span class="token string">"birthDate"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token literal-property property">countries</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"population"</span><span class="token punctuation">,</span> <span class="token string">"size"</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="获取值"><a href="#获取值" class="headerlink" title="获取值"></a>获取值</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">codeMirrorEditor<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>整体来说codemirror对于实现一个在线编辑器来说相当的方便了，就是引入插件和主题这些都是单独的文件要自己去找，引入一大堆。</p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> codemirror </tag>
            
            <tag> javascript </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件上传漏洞</title>
      <link href="/2022/04/25/wen-jian-shang-chuan-lou-dong/"/>
      <url>/2022/04/25/wen-jian-shang-chuan-lou-dong/</url>
      
        <content type="html"><![CDATA[<p>最近突然想测试公司的项目有没有问题，之前也发现过，公司的代码在控制器基类里面居然有一个上传方法，上传到本地，由于公司是以前老板自研框架，架构和技术等相当的老旧，所以没有现在的统一入口和路由的概念，都是直接访问的php文件。之前发现的问题，老板就只让注释了一下那个方法就完事了。这次再次尝试寻找其他上传漏洞。</p><h2 id="发现漏洞"><a href="#发现漏洞" class="headerlink" title="发现漏洞"></a>发现漏洞</h2><p>公司的富文本编辑器是用的百度的ueditor，所以从这里开始打开editor目录就发现了上传代码</p><p><a href="https://www.ponull.com/wp-content/uploads/2022/04/image.png"><img src="https://www.ponull.com/wp-content/uploads/2022/04/image.png"></a></p><p>ueditor</p><p>经过一通胡乱分析，发现原本的上传文件方法被同事改到了传到又拍云，不过仅仅限制了文件传输，意外发现还有个upBase64的方法，进去看到会被base64_decode并保存，继续查看代码，发现action传uploadscrawl便能进入此方法，</p><p><a href="https://www.ponull.com/wp-content/uploads/2022/04/image-1.png"><img src="https://www.ponull.com/wp-content/uploads/2022/04/image-1.png"></a></p><p>postman测试，果然返回了上传路径，此时已经可以发现项目下确实出现了这几个png文件</p><p><a href="https://www.ponull.com/wp-content/uploads/2022/04/image-2.png"><img src="https://www.ponull.com/wp-content/uploads/2022/04/image-2-1024x420.png"></a></p><p><a href="https://www.ponull.com/wp-content/uploads/2022/04/image-3.png"><img src="https://www.ponull.com/wp-content/uploads/2022/04/image-3.png"></a></p><p>那我们传一个经过base64编码之后的php文件试试，结果就不展示了，失败了，因为后缀被强行转化为了.png，搜索是否可以把png当作php执行，发现如果web服务器存在两种漏洞就可以将png当作php进行解析</p><ol><li>pathinfo漏洞</li></ol><ul><li>IIS6.0 的解析漏洞 ：1.jpg%00.php 1.asp;.jpg 1.asp/1.jpg</li><li>IIS 7.0/IIS 7.5/</li><li>Nginx &lt;8.03 畸形解析 1.jpg/.php</li><li>Nginx &lt;8.03 空字节代码执行漏洞 1.jpg%00.php</li><li>Apache 解析漏洞 .php.一个无效后缀</li></ul><ol start="2"><li><p>include漏洞<br>只要对方的php代码中存在 include xxxx ,这个xxxx可以传入外部参数的时候，例如有些开发者自己实现的框架中,include controller 这个controller 有做全路径引入的时候</p></li><li><p>我本地都是用的最新的肯定没有这个问题，那么服务器上面呢，还好我有公司demo服务器权限，赶紧看一下，发现不在漏洞的版本内，哎，这次就这样吧。毕竟我只是半桶水（更重要原因是要下班了，冲呀！！！）</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 闲来杂谈 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>wordpress更改固定链接后404</title>
      <link href="/2022/04/25/wordpress-geng-gai-gu-ding-lian-jie-hou-404/"/>
      <url>/2022/04/25/wordpress-geng-gai-gu-ding-lian-jie-hou-404/</url>
      
        <content type="html"><![CDATA[<p>发现网站访问比较慢，可能是我的server性能太弱鸡了吧，然后就想找一个缓存插件，最终决定使用<a href="https://wordpress.org/plugins/wp-super-cache/">WP Super Cache</a>。接着提示我要使用固定连接，而非p=%post_id%的朴素连接，结果一改就404了。</p><h2 id="WP-Super-Cache介绍"><a href="#WP-Super-Cache介绍" class="headerlink" title="WP Super Cache介绍"></a>WP Super Cache介绍</h2><p><a href="https://wordpress.org/plugins/wp-super-cache/">WP Super Cache</a>是最流行的免费缓存插件，有超过200万的活跃用户，而且这个插件是由Wordpress的公司Automattic开发的，可以非常放心使用。</p><p>WP Super Cache会为Wordpress的网站生成静态的HTML文件，当用户访问时，就不用再解析PHP脚本，并减少数据库的查询，通过这个插件，你的Wordpress网站将显著提速</p><ul><li>支持登录用户缓存</li><li>CDN集成</li><li>页面代码压缩</li><li>定时刷新缓存</li></ul><p>WP Super Cache 虽然是免费插件，但是功能非常全面，而且易于使用，非常推荐</p><h2 id="访问404"><a href="#访问404" class="headerlink" title="访问404"></a>访问404</h2><p>安装完成之后，满心欢喜的跑去试试效果，主页正常，文章也404了，感觉查了一番资料。是nginx配置的问题</p><p>解决方案</p><p>1. 直接打开 Nginx 的配置文件 nginx.conf，找到 server {}，在花括号里面添加代码（未测试）</p><pre class="line-numbers language-none"><code class="language-none">location / {    index index.html index.php;    if (-f $request_filename/index.html){        rewrite (.*) $1/index.html break;    }    if (-f $request_filename/index.php){        rewrite (.*) $1/index.php;    }    if (!-f $request_filename){        rewrite (.*) /index.php;    }}rewrite /wp-admin$ $scheme://$host$uri/ permanent;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2. 宝塔面板，在站点管理面板中找到伪静态，在下拉框中选择 wordpress，保存刷新即可（实测）</p><p><a href="https://www.ponull.com/wp-content/uploads/2022/04/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20220425152031.png"><img src="https://www.ponull.com/wp-content/uploads/2022/04/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20220425152031.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> 环境搭建 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Certbot生成SSL证书</title>
      <link href="/2022/04/25/certbot-sheng-cheng-ssl-zheng-shu/"/>
      <url>/2022/04/25/certbot-sheng-cheng-ssl-zheng-shu/</url>
      
        <content type="html"><![CDATA[<p>现在都在大力推广https，苦于很多服务商都要收费，而且申请也需要各种资料，是真的麻烦的呀，经过一番搜索，找到一个神器Certbot，这也是今天的主角，certbot会自动去<a href="https://letsencrypt.org/">Let’s encrypt</a>申请证书，包括后期的续期等也是非常方便的</p><p><a href="https://www.ponull.com/wp-content/uploads/2022/04/letsencrypt.jpg"><img src="https://www.ponull.com/wp-content/uploads/2022/04/letsencrypt.jpg"></a></p><p>Let’s encrypt</p><h2 id="安装Certbot"><a href="#安装Certbot" class="headerlink" title="安装Certbot"></a>安装Certbot</h2><p>网上找的好几个方法都是从github下载 <a href="https://github.com/certbot/certbot">https://github.com/certbot/certbot</a> 解压执行, 不过执行的那个certbot-auto这个文件我就是没有，没去看具体什么原因，原来apt源里面就有这个。就不麻烦了，直接一句话安装使用</p><pre class="line-numbers language-none"><code class="language-none">apt install letsencrypt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看运行状态</p><pre class="line-numbers language-none"><code class="language-none">systemctl status certbot.timer<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="生成SSL证书"><a href="#生成SSL证书" class="headerlink" title="生成SSL证书"></a>生成SSL证书</h2><pre class="line-numbers language-none"><code class="language-none">certbot certonly --webroot --agree-tos -v -t --email 邮箱地址 -w 网站根目录 -d 网站域名certbot certonly --webroot --agree-tos -v -t --email test@gmail.com -w /path/to/your/web/root -d www.ponull.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>注意</strong>这里 默认会自动生成到 /网站根目录/.well-known/acme-challenge 文件夹，然后 shell 脚本会对应的访问网站域名/.well-known/acme-challenge 是否存在来确定你对网站的所属权</p><p>比如：我的域名是<strong><a href="http://www.ponull.com/">www.ponull.com</a></strong>那我就得保证域名下面的**.well-known/acme-challenge/**目录是可访问的。如果返回正常就确认了你对这个网站的所有权，就能顺利生成，完成后这个目录会被清空</p><h2 id="获取证书"><a href="#获取证书" class="headerlink" title="获取证书"></a>获取证书</h2><p>如果上面的步骤正常 shell 脚本会展示如下信息：</p><pre class="line-numbers language-none"><code class="language-none">- Congratulations! Your certificate and chain have been saved at/etc/letsencrypt/live/网站域名/fullchain.pem...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="生成-dhparams"><a href="#生成-dhparams" class="headerlink" title="生成 dhparams"></a>生成 dhparams</h2><p>使用 openssl 工具生成 dhparams</p><pre class="line-numbers language-none"><code class="language-none">openssl dhparam -out /etc/ssl/certs/dhparams.pem 2048<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="配置-Nginx"><a href="#配置-Nginx" class="headerlink" title="配置 Nginx"></a>配置 Nginx</h2><p>打开 nginx server 配置文件加入如下设置：</p><pre class="line-numbers language-none"><code class="language-none">listen 443;ssl on;ssl_certificate /etc/letsencrypt/live/网站域名/fullchain.pem;ssl_certificate_key /etc/letsencrypt/live/网站域名/privkey.pem;ssl_dhparam /etc/ssl/certs/dhparams.pem;ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2;ssl_ciphers HIGH:!aNULL:!MD5;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后重启 nginx 服务就可以了</p><h2 id="强制跳转-https"><a href="#强制跳转-https" class="headerlink" title="强制跳转 https"></a>强制跳转 https</h2><p>https 默认是监听 443 端口的，没开启 https 访问的话一般默认是 80 端口。如果你确定网站 80 端口上的站点都支持 https 的话加入下面的配件可以自动重定向到 https</p><pre class="line-numbers language-none"><code class="language-none">server {    listen 80;    server_name your.domain.com;    return 301 https://$server_name$request_uri;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="证书更新"><a href="#证书更新" class="headerlink" title="证书更新"></a>证书更新</h2><p>免费证书只有 90 天的有效期，到时需要手动更新 renew。刚好 Let’s encrypt 旗下还有一个<a href="https://letsmonitor.org/">Let’s monitor</a>免费服务，注册账号添加需要监控的域名，系统会在证书马上到期时发出提醒邮件，非常方便。收到邮件后去后台执行 renew 即可，如果提示成功就表示 renew 成功，这一步我还没到期，还没申请</p><pre class="line-numbers language-none"><code class="language-none">certbot renew<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://keelii.github.io/2016/06/12/free-https-cert-lets-encrypt-apply-install/">https://keelii.github.io/2016/06/12/free-https-cert-lets-encrypt-apply-install/</a> （除了安装，基本上都是按照这里面的步骤来的）</p><p><a href="https://unixcop.com/how-to-use-certbot-create-a-certificate-for-domain-and-submain/">https://unixcop.com/how-to-use-certbot-create-a-certificate-for-domain-and-submain/</a>（这里面的nginx配置感觉更合理没有测试）</p>]]></content>
      
      
      <categories>
          
          <category> 环境搭建 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Windows11安装安卓子系统</title>
      <link href="/2022/04/23/windows11-an-zhuang-an-zhuo-zi-xi-tong/"/>
      <url>/2022/04/23/windows11-an-zhuang-an-zhuo-zi-xi-tong/</url>
      
        <content type="html"><![CDATA[<p>最近试用了一下windows的安卓子系统，感觉还是非常的哇塞，这里就记录一下安装的流程吧</p><h2 id="1-修改地区"><a href="#1-修改地区" class="headerlink" title="1. 修改地区"></a>1. 修改地区</h2><p>好像只有美国地区才可以在微软商店安装下载windows子系统，所以首先修改自己的windows的地区为美国，设置-&gt;时间和语言-&gt;语言和地区-&gt;国家或地区选择美国</p><p><a href="https://www.ponull.com/wp-content/uploads/2022/04/QQ%E5%9B%BE%E7%89%8720220423141134.png"><img src="https://www.ponull.com/wp-content/uploads/2022/04/QQ%E5%9B%BE%E7%89%8720220423141134-1024x799.png"></a></p><p>windows地区设置</p>]]></content>
      
      
      <categories>
          
          <category> 环境搭建 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>网站Icon生成工具</title>
      <link href="/2022/04/22/wang-zhan-icon-sheng-cheng-gong-ju/"/>
      <url>/2022/04/22/wang-zhan-icon-sheng-cheng-gong-ju/</url>
      
        <content type="html"><![CDATA[<p>从开始做博客，自己也要很用心的来设计页面，虽然说技术论坛不能花里胡哨的，但是也要自己用着爽才行呀，选主题，logo，域名真的是一件很费神的事情，就从icon来说吧，自己也不会一些图片工具，网上直接下载别人的呢也好像不是自己的亲生儿子，看着总差点儿意思，就意外发现这个这个icon生成工具<a href="https://favicon.io/">favicon.io</a>，支持图片、文字、emoji转成icon，十分方便，而且简洁大方。</p><p><a href="https://www.ponull.com/wp-content/uploads/2022/04/QQ%E6%88%AA%E5%9B%BE20220423132613.png"><img src="https://www.ponull.com/wp-content/uploads/2022/04/QQ%E6%88%AA%E5%9B%BE20220423132613-1024x316.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> 实用工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>破浪博客起源，达克效应</title>
      <link href="/2022/04/22/da-ke-xiao-ying/"/>
      <url>/2022/04/22/da-ke-xiao-ying/</url>
      
        <content type="html"><![CDATA[<p>首先说说搭建这个博客的原因吧， 写程序近四年了，写过不少系统和工具，<br>中途也搭建过好几次博客， 但是都没能坚持下来，最后等到域名和服务器过期也没去管。<br>这次为什么下定决心一定要搭建博客并且写下去呢，也是薪资的原因。<br>说实话这几年写代码从一开始的信心满满到现在感觉自己一无是处什么都不会，<br>也还是心态造成了，应该大部分程序员都和我都一样的经历，<br>最先开始我是做php的(包括现在的工作也是)，很多人瞧不上php，<br>就让作为初学者的自己备受打击，觉得自己应该学一个强类型编译型的语言，<br>其实当时自己连脚本语言和编译语言的区别都搞不懂就是想学牛逼。<br>然后就开始学golang，后面见着网上有很多好看的page，<br>这个时候正好也是vue开始火的时候就又学了vue。后面因为私单问题吧，<br>觉得自己应该要独立撑起来做东西，接着学了flutter和uniapp，<br>中途附加了rust，python，C#等语言。<br>最近觉得还有几年就迈入30大关的我，身无分文，无房无车，<br>见着周围做程序员的朋友各个都是一万起步，自己心里慌呀，就想着跳槽，<br>之前也萌生过不少次跳槽的想法，但是都被自己的懒惰给打败了，吃不了苦，<br>怕其他公司任务重，加班累，想着下班就不能看直播和小说了，<br>作为一个lol十年的老白银选手，我是接受不了一天不看直播的，<br>这是我的梦想，自己不能在游戏里面虐菜，看别人虐菜也是一件很舒服的事情<br>（哈哈哈，会不会有老铁和我一样）。言归正传，</p><p>然后某一天突然在油管刷视频刷到了达克效应，才发现自己完全符合这个曲线，<br>从php-&gt;go-&gt;vue-&gt;c#-&gt;flutter-&gt;rust,python。一步一步迈入了愚昧之山，<br>觉得自己会的语言多就厉害，刚开始还是挺刻苦的，每晚回去学习到一两点，<br>坚持了大概2年，再到我前同事一下打醒了我，其实挺感谢这位前同事的，<br>这个时候还愿意推荐我，说明我平时的努力还是没有白费。继续说绝望之谷的事，<br>我突然发现自己对php这个自己的本名语言一无所知。扩展库的安装，<br>一些设计模式等等毫无概念。</p><p><a href="http://www.ponull.com/wp-content/uploads/2022/04/v2-0cedde7f1277db3f3e6feee1d2c9f0ca_720w.jpg"><img src="http://www.ponull.com/wp-content/uploads/2022/04/v2-0cedde7f1277db3f3e6feee1d2c9f0ca_720w.jpg" alt="达克效应"></a></p><p>达克效应</p><blockquote><p>定义（知乎某文章）</p><p>能力欠缺的人在自己欠考虑的决定的基础上得出错误结论，<br>但是无法正确认识到自身的不足，辨别错误行为。<br>这些能力欠缺者们沉浸在自我营造的虚幻的优势之中，<br>常常高估自己的能力水平，却无法客观评价他人的能力。</p></blockquote><blockquote><p>常见人群（引用自百度百科）</p><p>比如，工作中总会有一个门外汉会对他人的工作指指点点， 这种门外汉通常会是上司或者年龄较长者，也就会成为我们常说的倚老卖老。<br>第二种：半瓶子型<br>研究表明：一知半解的新手最会有过度自信的情况，也就造成了“新手泡沫”（The beginner bubble）。一项关于医生诊断失误率的调查中得出：在最开始，新手医生是谦虚的，对自己诊断正确率有比较正确的认识。但是在诊断了一些病人之后，这些有一定诊断经验的新医生高估了自己的诊断准确率，他们认为诊断准确率为73%，可实际上正确率还没有到达60%。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 闲来杂谈 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
